DL_SCRIPTVERSION
1
19801

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "VSF-1895" ' !!!!! EDIT THIS !!!!!
' This test case is to verify
' "touch screen stop working" issue as addressed in VSF-1895 
'============================================================
' Global Variable definitions
'============================================================
freeMem = 15000
freeMemCounter = 0
preFreeMem = 30000
minFreeMem = 30
'============================================================
FileOutput.CreateFile "Free_Mem_Log.txt", False, False
FileOutput.WriteLine "List free memory size below on each iteration:"

'============================================================

'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config"
' FileInput.OpenFile "Loop.Config"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)
DebuggerOption = 1
Dim ControlID

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result
      
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' - 
'------------------------------------------------------------
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
errCnt = 0
caseValid = 0

result = 1

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON " Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub


'==============================================
' Sub: open project and set port and baudrate 
'==============================================
Sub StartProj (ProjectName)

DL.Pause 1000
DL.StopCommunication
DL.AddComment vbCrLf & "Communication stopped ..." & vbCrLf
DL.Pause 1000

DL.OpenProject ProjectName & ".ptp"
DL.Pause 3000
DL.AddComment vbCrLf & "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

DL.AddComment "--- Set POS COM PORT Settings"
'DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication
DL.AddComment vbCrLf & "Communication started ..." & vbCrLf
DL.Pause 1000

End Sub
'==== End of open project and set port and baudrate
Sub DL_OnSend()
sendPeek = DL.OnSend_Peek(1)
'DL.AddComment "sendPeek = " & sendPeek

If sendPeek <> 86 Then
  DL.AddComment "sendPeek = " & sendPeek
Else
    ' For all Send Sequences with minimum 3 bytes length (one byte user data,
    ' two bytes CRC, perform the following manipulation:
    ' - Calculate a 16 bit crc value on the characters 1 .. (DL.OnSend_Size() - 2)
    ' - Write the low byte to character no. DL.OnSend_GetSize()-1
    ' - Write the high byte to character no. DL.OnSend_GetSize()
    ' Example:
    ' Send Sequence name: MyCommand
    ' Send Sequence in HEX representation: 02 04 00 00 00 01 00 00
    ' --> Data transmitted by Docklight:   02 04 00 00 00 01 31 F9
    '     (with "31" as the low byte CRC, "F9" as the high byte)

    ' Check if there is at least one byte of user data
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Right(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Left(crcStr, 2)) ' high byte
    End If
End If 'end of sendPeek

End Sub

Sub DL_OnReceive()
resultName = DL.OnReceive_GetName()
'DL.AddComment "resultName = " & resultName

Select Case resultName
	Case "Display Control OK"
		resultRcv = DL.OnReceive_GetData("H")	' get the result as string of Hex-values
		DL.AddComment resultRcv	
		' one possible solution to get single characters
		MyArray = Split(resultRcv , " ", -1, 1)

		' ### Prints each byte in array
		'For i = 0 to UBound(MyArray)
   		'	DL.AddComment "i = " & i & "Array - " & (MyArray(i))
		'Next
		' ### Extracts 4 byte Control ID
		ControlID = MyArray(14) & " " & MyArray(15) & " " & MyArray(16) & " " & MyArray(17)
		' ### Prints 4 byte Control ID
		DL.AddComment "Control ID = " & ControlID

	Case "ENTER Key PRESSED"
		ENTER_Key_Pressed = 1

	Case "Get Mem Resp"
		resultRcv = DL.OnReceive_GetData("H")	' get the result as string of Hex-values
		DL.AddComment vbCrLf & resultRcv & vbCrLf
		' one possible solution to get single characters
		MyArray = Split(resultRcv , " ", -1, 1)

            freeMem = Chr("&H" & MyArray(55)) & Chr("&H" & MyArray(56)) & Chr("&H" & MyArray(57)) & Chr("&H" & MyArray(58)) & Chr("&H" & MyArray(59))

		' ### Prints free mem 5 byte freeMem
		DL.AddComment "Free Memory = " & freeMem
		FileOutput.WriteLine "Free Memory = " & freeMem & "   --- " & freeMemCounter
		freeMemCounter = freeMemCounter + 1 
            If freeMem < 30 Then
		  DL.AddComment vbCrLf & "Warning: Free Memory Size is < 30K !!!" & vbCrLf
            End If

End Select
End Sub

Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function

'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function

'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
'------------------------------------------------------------
loopForever = 1
runIt = 0
doNotRun = 0
Count = 0
StartProj("VSF-1895")

  DL.ResetReceiveCounter
  DL.AddComment "--- clear screen"
  DL.SendSequence "clear screen"
  result = DL.WaitForSequence("Generic positive resp", 1, 3000)
  DL.Pause 1000

  DL.ResetReceiveCounter
  DL.AddComment "--- display check box"
  DL.SendSequence "display check box"
  result = DL.WaitForSequence("Generic positive resp", 1, 3000)
  DL.Pause 1000

  DL.ResetReceiveCounter
  DL.AddComment "--- clear event queue"
  DL.SendSequence "clear event queue"
  result = DL.WaitForSequence("Generic positive resp", 1, 3000)
  DL.Pause 1000

  DL.ResetReceiveCounter
  DL.AddComment "--- get input event (0wait)"
  DL.SendSequence "get input event (0wait)"
  result = DL.WaitForSequence("Generic resp", 1, 3000)
  DL.Pause 1000

  prompt2 = "Please keep checking and unchecking the check box for at least 100 times and verify if the touch screen stops responding. Click Ok when you are done."
  result = MsgBox(prompt2, VBOKOnly, "Input Event Test")

MyInput = MsgBox("Has you seen touch screen stops responding?", VBYesNo, "Test Step")
If MyInput = 6 Then
	result = 0
ElseIf MyInput = 7 Then
	result = 1
End If


DL.AddComment vbCrLf
PrintMyResult(result)

DL.AddComment "---------- END OF TEST ----------" & vbCrLf
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""

'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.pause 1000

If result = 0 then
  DL.AddComment Chr(13) & "Result = FAILED"
Else
  DL.AddComment Chr(13) & "Result = PASSED"
End If

If Prompting(0) = "ON" Then
  If result = 0 then
    MsgBox "Result = FAILED", VBOKOnly, "Result"
  Else 
    MsgBox "Result = PASSED", VBOKOnly, "Result"
  End If
End If

'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------

If MasterResult = 1 Then
      MasterVerdict = "PASSED"
ElseIf MasterResult = 0 Then
      MasterVerdict = "FAILED"
End If
result = MasterResult
DL.AddComment vbCrLf
DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

'FileOutput.CreateFile "FINAL_VERDICT.txt"

'If MasterResult = 0 Then 
'	FileOutput.WriteLine "0|FAIL|NOK"
'ElseIf MasterResult = 1 Then
'	FileOutput.WriteLine "1|PASS|OK"
'End If
'FileOutput.WriteLine MasterResult
'FileOutput.CloseFile 


