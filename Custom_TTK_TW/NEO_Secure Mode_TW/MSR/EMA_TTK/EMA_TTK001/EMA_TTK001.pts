DL_SCRIPTVERSION
1
25552

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "EMA_TTK001" ' !!!!! EDIT THIS !!!!!
'Objective: To verify specific MSR test card
'TTK1 Card data_Track2_only(;7703020261522749?)
'TTK2 Card data_Track2_only(;154420208601926214=?)
'TTK3 Card data_None Expire Date0000(%B0000000000000000^00000000000000000000000000^0000000000000000000000000000000?;7578117049875910=00000000000000000070?;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000?)
'TTK4 Card data_Expire Date_Month is illegal(;2013014037093016=99999999999999999999?)
'TTK5 Card data_Track2+Track3(;5898030521855149=491210116361618000?6;0159003=00160422560101606=4104103000000000000000000000150000099990=00000000000000000==1=1013680000000000?1)
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result
      
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
'DL.StartCommunication
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON " Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub

Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function

'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function
'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------

Err0BCounter = 0
RxStatus = 0
'============================================================

sub precondition()
    if result <> 0 then  
    dl.resetreceivecounter
    dL.AddComment  vbCrLf
    dl.addcomment "Erase All Keys..."
    dl.sendsequence "Erase All Key (83-00)"
    result = dl.waitforsequence("Erase all key successfully", 1, 2000)
    dl.pause 200
    end if
     if result <> 0 then
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "Set DUKPT Key Encryption Type..."
       dl.sendsequence "1-use AES to encrypt (C7-32)"
       result = dl.waitforsequence("Set encryption type successfully", 1, 2000)
       dl.pause 200
     end if 
       if result <> 0 then
          dl.resetreceivecounter
          dl.addcomment vbcrlf
          dl.addcomment "Get DUKPT Key Encryption Type..."
          dl.sendsequence "Get account DUKPT encryption type (C7-33)"
          result = dl.waitforsequence("Check encryption - AES", 1, 2000)
          dl.pause 200
       end if
 
    dl.addcomment vbcrlf
    dl.addcomment "Loading DUKPT key..."
       dl.resetreceivecounter
       dl.sendsequence "Load Plaintext Key - command 1 (80-00)"
       result = dl.waitforsequence("Load Plaintext Key successfully", 1, 2000)
       dl.pause 200
       if result <> 0 then
          dl.resetreceivecounter
          dl.sendsequence "Load Plaintext Key - command 2  (80-00)"
          result = dl.waitforsequence("Load Plaintext Key successfully", 1, 2000)
          dl.pause 200
       end if 
          if result <> 0 then
             dl.resetreceivecounter
             dl.sendsequence "Load Encrypted KPK (80-01)"
             result = dl.waitforsequence("Load Plaintext Key successfully", 1, 2000)
             dl.pause 200
          end if
             if result <> 0 then
                dl.resetreceivecounter
                dl.sendsequence "Enter DUKPT Key (81-00)"
                result = dl.waitforsequence("Load DUKPT Key successfully", 1, 2000)
                dl.pause 200   
             end if 
                if result <> 0 then
                   dl.resetreceivecounter
                   dl.sendsequence "Enable Data Encryption  (C7-36) - 02"
                   result = dl.waitforsequence("Data Encryption enable", 1, 2000)
                   dl.pause 200
                end if
end sub

sub POM()
    If result <> 0 Then
    dl.resetreceivecounter
    DL.AddComment vbCrLf & vbCrLf & "Poll on Demand"
    DL.SendSequence "Poll on Demand (01-01)"
    result = DL.WaitForSequence("Poll mode response", 1, 10000)
    End If
end sub

sub AUTOPOL()
    If result <> 0 Then
    dl.resetreceivecounter 
    DL.AddComment vbCrLf & vbCrLf & "Auto Poll"
    DL.SendSequence "Auto Poll (01-01)"
    result = DL.WaitForSequence("Poll mode response", 1, 10000)
    End If
end sub


'=============================
'TEST BEGINS
'=============================
 If result <> 0 Then
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "Burst mode Off"
  DL.SendSequence "Burst Off (04-00)"
  result = DL.WaitForSequence("Burst mode response", 1, 10000)
 End If
'----------------------------------------------------------
 If result <> 0 Then
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "Poll on Demand"
  DL.SendSequence "Poll on Demand (01-01)"
  result = DL.WaitForSequence("Poll mode response", 1, 10000)
 End If
'----------------------------------------------------------
'Poll on Demand + Burst mode Off
 POM()
'----------------------------------------------------------
 DL.ClearCommWindows
 precondition()
 DL.ClearCommWindows
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "--- TTK1"
  DL.SendSequence "Activate Transaction (02-40) - 9F02"
  RxStatus = DL.WaitForSequence("Activate transaction response - TTK1", 1, 10000)
  If RxStatus = 0 then
    DL.AddComment "IDT Std MSR card does not return expected data"
    Err0BCounter = Err0BCounter + 1
  End If 
Dl.pause 200
'----------------------------------------------------------
 DL.ClearCommWindows
 precondition()
 DL.ClearCommWindows
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "--- TTK2"
  DL.SendSequence "Activate Transaction (02-40) - 9F02"
  RxStatus = DL.WaitForSequence("Activate transaction response - TTK2", 1, 10000)
  If RxStatus = 0 then
    DL.AddComment "Discover card does not return expected data"
    Err0BCounter = Err0BCounter + 1
  End If 
Dl.pause 200
'----------------------------------------------------------
 DL.ClearCommWindows
 precondition()
 DL.ClearCommWindows
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "--- TTK3"
  DL.SendSequence "Activate Transaction (02-40) - 9F02"
  RxStatus = DL.WaitForSequence("Activate transaction response - TTK3", 1, 10000)
  If RxStatus = 0 then
    DL.AddComment "JIS I card does not return expected data"
    Err0BCounter = Err0BCounter + 1
  End If 
Dl.pause 200
'----------------------------------------------------------
 DL.ClearCommWindows
 precondition()
 DL.ClearCommWindows
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "--- TTK4"
  DL.SendSequence "Activate Transaction (02-40) - 9F02"
  RxStatus = DL.WaitForSequence("Activate transaction response - TTK4", 1, 10000)
  If RxStatus = 0 then
    DL.AddComment "JIS II card does not return expected data"
    Err0BCounter = Err0BCounter + 1
  End If 
Dl.pause 200
'----------------------------------------------------------
 DL.ClearCommWindows
 precondition()
 DL.ClearCommWindows
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "--- TTK5"
  DL.SendSequence "Activate Transaction (02-40) - 9F02"
  RxStatus = DL.WaitForSequence("Activate transaction response - TTK5", 1, 10000)
  If RxStatus = 0 then
    DL.AddComment "JIS II card does not return expected data"
    Err0BCounter = Err0BCounter + 1
  End If 
Dl.pause 200

'-------------------------------------------------------
'Auto poll + Burst mode OFF
'---------------------------------------------------------
 DL.ClearCommWindows
  POM()
  precondition()
  AUTOPOL()
 DL.ClearCommWindows
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "---  TTK1"
  DL.Pause 4000
  DL.SendSequence "03-40------Get Transaction Result"
  RxStatus = DL.WaitForSequence("get transaction result response - TTK1", 1, 3000)
  If RxStatus = 0 then
    DL.AddComment "IDT card does not return expected data"
    Err0BCounter = Err0BCounter + 1
  End If
Dl.pause 200

'----------------------------------------------------------
 DL.ClearCommWindows
  POM()
  precondition()
  AUTOPOL()
 DL.ClearCommWindows
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "--- TTK2"
  DL.Pause 4000
  DL.SendSequence "03-40------Get Transaction Result"
  RxStatus = DL.WaitForSequence("get transaction result response - TTK2", 1, 3000)
  If RxStatus = 0 then
    DL.AddComment "Discover card does not return expected data"
    Err0BCounter = Err0BCounter + 1
  End If
Dl.pause 200
'----------------------------------------------------------
 DL.ClearCommWindows
  POM()
  precondition()
  AUTOPOL()
 DL.ClearCommWindows
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "--- TTK3"
  DL.Pause 4000
  DL.SendSequence "03-40------Get Transaction Result"
  RxStatus = DL.WaitForSequence("get transaction result response - TTK3", 1, 3000)
  If RxStatus = 0 then
    DL.AddComment "JIS I card does not return expected data"
    Err0BCounter = Err0BCounter + 1
  End If
Dl.pause 200
'----------------------------------------------------------
 DL.ClearCommWindows
  POM()
  precondition()
  AUTOPOL()
 DL.ClearCommWindows
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "--- TTK4"
  DL.Pause 4000
  DL.SendSequence "03-40------Get Transaction Result"
  RxStatus = DL.WaitForSequence("get transaction result response - TTK4", 1, 3000)
  If RxStatus = 0 then
    DL.AddComment "JIS II card does not return expected data"
    Err0BCounter = Err0BCounter + 1
  End If
Dl.pause 200
'----------------------------------------------------------
 DL.ClearCommWindows
  POM()
  precondition()
  AUTOPOL()
 DL.ClearCommWindows
  dl.resetreceivecounter
  DL.AddComment vbCrLf & vbCrLf & "--- TTK5"
  DL.Pause 4000
  DL.SendSequence "03-40------Get Transaction Result"
  RxStatus = DL.WaitForSequence("get transaction result response - TTK5", 1, 3000)
  If RxStatus = 0 then
    DL.AddComment "JIS II card does not return expected data"
    Err0BCounter = Err0BCounter + 1
  End If
Dl.pause 200
'-----------------------------------------------------------
If Err0BCounter <> 0 Then
  DL.AddComment vbCRLf & vbCRLf & Err0BCounter & " command(s) found, which did not return proper card data as expected. Please check the log file for details." 
  result = 0
End If

'------------------------------------------------------------

dl.addcomment vbcrlf
DL.AddComment "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""

'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.pause 1000

If 0 Then
If result = 0 then
  DL.AddComment Chr(13) & "Result = FAILED"
Else
  DL.AddComment Chr(13) & "Result = PASSED"
End If
End If

If Prompting(0) = "ON" Then
  If result = 0 then
    MsgBox "Result = FAILED", VBOKOnly, "Result"
  Else 
    MsgBox "Result = PASSED", VBOKOnly, "Result"
  End If
End If

'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------

If MasterResult = 1 Then
      MasterVerdict = "PASSED"
ElseIf MasterResult = 0 Then
      MasterVerdict = "FAILED"
End If
result = MasterResult
DL.AddComment vbCrLf
DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 
