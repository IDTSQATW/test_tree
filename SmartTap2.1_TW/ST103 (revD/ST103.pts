DL_SCRIPTVERSION
1
6080

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "ST103" ' !!!!! EDIT THIS !!!!!
' Objective: SmartTap 2.1, negative test -- Enc ON, RX format should not be changed
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config2"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
   'Display Test Case Number and Description     
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()
   Prompting(0) = result
      
   'Display Test Steps   
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   Prompting(1) = result

   'Set Docklight COM Port     
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   COM_Port(1) = result

   'Set Reader Baud Rate
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   POSBaudRate(1) = result

   'Set Reader Type
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   readerType = result

   'Set Reader Model
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   readerModel = result

   'Set Reader FW version
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   fwVersion = result

   'Set Reader FW build
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   fwBuild = result

   'Set Reader General Flag
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   fwGF = result
Loop

Sub StepPrompt(PromptString)
    DL.AddComment PromptString
    If Prompting(1) = "ON" Then
       MsgBox PromptString, VBOKOnly, "Test Step"
    Else
    End If
End Sub
'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
countf = 0
vivotech = 0
idtech = 0

result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""
'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication
'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
End If

Sub PrintMyResult(ResultX)
    If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
       MasterResult = 1
       DL.AddComment "Result = PASSED"
    Else
       MasterResult = 0
       DL.AddComment "Result = FAILED"
    End If
End Sub
'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
         DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
         MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function
'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
if readerType <> "NEO2" then 
   If result <> 0 Then
      dl.resetreceivecounter
      DL.AddComment "--- 0-use AES to encrypt (C7-32)"
      DL.SendSequence "0-use AES to encrypt (C7-32)"
      result = DL.WaitForSequence("C7 00", 1, 3000)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Enable Data Encryption  (C7-36)"
      DL.SendSequence "Enable Data Encryption  (C7-36)"
      result = DL.WaitForSequence("C7 00", 1, 3000)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Erase All Key (83-00)"
      DL.SendSequence "Erase All Key (83-00)"
      result = DL.WaitForSequence("83-00 ok resp", 1, 2000)
      dl.pause 1000
      if result <> 0 then
         dl.resetreceivecounter
         dl.addcomment vbcrlf
         DL.AddComment "--- Load KPK"
         DL.SendSequence "Load Plaintext Key - command 1 (80-00)"
         result = DL.WaitForSequence("80-xx ok resp", 1, 2000)
         dl.pause 500 
         if result <> 0 then
            dl.resetreceivecounter
            DL.SendSequence "Load Plaintext Key - command 2  (80-00)"
            result = DL.WaitForSequence("80-xx ok resp", 1, 2000)
            dl.pause 500 
            if result <> 0 then
               dl.resetreceivecounter
               DL.SendSequence "Load Encrypted KPK (80-01)"
               result = DL.WaitForSequence("80-xx ok resp", 1, 2000)
               dl.pause 500 
               if result <> 0 then
                  dl.resetreceivecounter
                  dl.addcomment vbcrlf
                  DL.AddComment "--- Load DUKPT key"
                  DL.SendSequence "Enter DUKPT Key (81-00)"
                  result = DL.WaitForSequence("81-xx ok resp", 1, 2000)
                  dl.pause 300 
               end if
            end if
         end if
      end if 
   end if
else
   if result <> 0 then
      dl.resetreceivecounter
      DL.AddComment "--- C7-33, data key = AES type"
      DL.SendSequence "C7-33"
      result = DL.WaitForSequence("C7-33 resp = AES", 1, 2000)
      dl.pause 500
   end if

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- C7-37, Get Data Encryption = 03"
      DL.SendSequence "Get Data Encryption (C7-37)"
      result = DL.WaitForSequence("C7-37 resp", 1, 2000)
      dl.pause 500
   end if

   if result = 0 then dl.addcomment vbcrlf & vbcrlf & "Please load data key (AES) & enable encryption (03) by manual first..."
End If
'------------------------------------------------------------
If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Poll on demand"
   DL.SendSequence "poll on demand"
   result = DL.WaitForSequence("01-01 resp 00", 1, 3000)
End If

If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Burst mode off *** " & readerType 
   if readerType <> "NEO2" then 
      DL.SendSequence "burst mode off"
   else 
      DL.SendSequence "burst mode off (NEO2)"
   end if
   result = DL.WaitForSequence("04-00 resp 00", 1, 3000)
End If

If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- C7-65 set private key"
   DL.SendSequence "C7-65 set private key"
   result = DL.WaitForSequence("C7 00", 1, 3000)
   dl.pause 1000
End If
'------------------------------------------------------------
if result <> 0 then
   for t = 1 to 4
       if t = 1 then c = "case 1.1"
       if t = 2 then c = "case 3.1"
       if t = 3 then c = "case 5.1"
       if t = 4 then c = "case 0.6"

       If result <> 0 Then
          dl.resetreceivecounter
          dl.addcomment vbcrlf
          DL.AddComment "--- " & c & " >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
          if readerType <> "NEO2" then 
             DL.SendSequence c
          else
             DL.SendSequence c & " (NEO2)"
          end if
          result = DL.WaitForSequence("04-00 resp 00", 1, 5000)
       End If

       If result <> 0 Then
          dl.resetreceivecounter
          dl.addcomment vbcrlf
          msgbox "Click OK --> Tap phone (Merchant APP: " & c & ")", vbokonly
          DL.AddComment "--- 02-40 " & c
          DL.SendSequence "02-40 " & c
          if readerType <> "NEO2" then
             result = DL.WaitForSequence("02-40 " & c, 1, 6000)
             dl.pause 1000
             if t = 4 then 
                if result <> 0 then result = DL.WaitForSequence("02-40 " & c & "_56/ 9F6B", 1, 2000)
                if result <> 0 then result = DL.WaitForSequence("02-40 " & c & "_FFEE08", 1, 2000)
                if result <> 0 then result = DL.WaitForSequence("02-40 " & c & "_9F39", 1, 2000)
                if result <> 0 then result = DL.WaitForSequence("02-40 " & c & "_DF30", 1, 2000)
                if result <> 0 then result = DL.WaitForSequence("02-40 " & c & "_DFEE26", 1, 2000)
             end if
          else
             result = DL.WaitForSequence("02-40 " & c & " (NEO2)", 1, 6000)
             dl.pause 1000
             if t = 4 then 
                if result <> 0 then result = DL.WaitForSequence("02-40 " & c & "_56/ 9F6B (NEO2)", 1, 2000)
                if result <> 0 then result = DL.WaitForSequence("02-40 " & c & "_FFEE08 (NEO2)", 1, 2000)
                if result <> 0 then result = DL.WaitForSequence("02-40 " & c & "_9F39 (NEO2)", 1, 2000)
                if result <> 0 then result = DL.WaitForSequence("02-40 " & c & "_DF30 (NEO2)", 1, 2000)
                if result <> 0 then result = DL.WaitForSequence("02-40 " & c & "_DFEE26 (NEO2)", 1, 2000)
             end if
          end if
       End If
   next
end if
DL.AddComment vbCrLf
'============================================================
DL.AddComment "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)

Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""
'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'DL.pause 1000

'If result = 0 then
'   DL.AddComment Chr(13) & "Result = FAILED"
'Else
'   DL.AddComment Chr(13) & "Result = PASSED"
'End If

'If Prompting(0) = "ON" Then
'   If result = 0 then
'      MsgBox "Result = FAILED", VBOKOnly, "Result"
'   Else 
'      MsgBox "Result = PASSED", VBOKOnly, "Result"
'   End If
'End If
'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------
'If MasterResult = 1 Then
'   MasterVerdict = "PASSED"
'ElseIf MasterResult = 0 Then
'       MasterVerdict = "FAILED"
'End If
'result = MasterResult
'DL.AddComment vbCrLf
'DL.AddComment "MASTER RESULT = " & MasterVerdict
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
   FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
       FileOutput.WriteLine "1|PASS|OK"
End If
FileOutput.CloseFile

Sub DL_OnSend()
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Right(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Left(crcStr, 2)) ' high byte
    End If
End Sub
