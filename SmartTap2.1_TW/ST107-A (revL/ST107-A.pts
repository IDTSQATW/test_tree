DL_SCRIPTVERSION
1
65008

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "ST107-A" ' !!!!! EDIT THIS !!!!!
' Objective: SmartTap 2.1, to check default value of tags (DFED27/ DFEF77).
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config2"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
   'Display Test Case Number and Description     
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()
   Prompting(0) = result
      
   'Display Test Steps   
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   Prompting(1) = result

   'Set Docklight COM Port     
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   COM_Port(1) = result

   'Set Reader Baud Rate
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   POSBaudRate(1) = result

   'Set Reader Type
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   readerType = result

   'Set Reader Model
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   readerModel = result

   'Set Reader FW version
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   fwVersion = result

   'Set Reader FW build
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   fwBuild = result

   'Set Reader General Flag
   result = FileInput.GetLine() 'by pass variable name
   result = FileInput.GetLine()      
   fwGF = result
Loop

Sub StepPrompt(PromptString)
    DL.AddComment PromptString
    If Prompting(1) = "ON" Then
       MsgBox PromptString, VBOKOnly, "Test Step"
    Else
    End If
End Sub
'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
countf = 0
vivotech = 0
idtech = 0

result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""
'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication
'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
End If

Sub PrintMyResult(ResultX)
    If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
       MasterResult = 1
       DL.AddComment "Result = PASSED"
    Else
       MasterResult = 0
       DL.AddComment "Result = FAILED"
    End If
End Sub
'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
         DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
         MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function
'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
readercheck = msgbox ("Is this SRED project?", vbyesno)
reader = msgbox ("This reader is VP6300 SRED_USAT?", vbyesno)     'Refer to spec: NEO 2 IDG Supplement for VP6300 SRED (USAT) v1.0.9 Draft

If result <> 0 Then
   dl.resetreceivecounter
   DL.AddComment "--- 04-0A *** " & readerType 
   DL.SendSequence "04-0A"
   result = DL.WaitForSequence("04-00 resp 00", 1, 15000)
   dl.pause 12000
End If

if readercheck = 7 then
If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- C7-33, data key = AES type"
   DL.SendSequence "C7-33"
   result = DL.WaitForSequence("C7-33 resp = AES", 1, 2000)
   dl.pause 500
   if result = 0 then dl.addcomment vbcrlf & vbcrlf & "Please use 'AES' type data key/ enable encryption as '03' and then restart this test again..."
End If

If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- C7-37, Get Data Encryption = 03"
   DL.SendSequence "Get Data Encryption (C7-37)"
   result = DL.WaitForSequence("C7-37 resp", 1, 2000)
   dl.pause 500
   if result = 0 then dl.addcomment vbcrlf & vbcrlf & "Please enable encryption as '03' and then restart this test again..."
End If
end if

If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Get config"
   if readerType <> "NEO2" then
      DL.SendSequence "03-06"
   else
      DL.SendSequence "03-06 (NEO2)"
   end if
   result = DL.WaitForSequence("03 00", 1, 3000)
   dl.pause 500
End If

if result <> 0 then
   if reader = 7 then r1 = DL.WaitForSequence("DFEE3B", 1, 500)
   if reader = 6 then r1 = DL.WaitForSequence("DFEE3B (VP6300 SRED_USAT)", 1, 500)
   if reader = 7 then r2 = DL.WaitForSequence("DFEE3C", 1, 500)
   if reader = 6 then r2 = 1
   if reader = 7 then r3 = DL.WaitForSequence("DFEE3D", 1, 500)
   if reader = 6 then r3 = 1
   if reader = 7 then r4 = DL.WaitForSequence("DFEF25", 1, 500)
   if reader = 6 then r4 = 1
   if reader = 7 then r5 = DL.WaitForSequence("DFED01", 1, 500)
   if reader = 6 then r5 = 1
   r6 = DL.WaitForSequence("DFED02", 1, 3000)
   if reader = 7 then r7 = DL.WaitForSequence("DFED03", 1, 500)
   if reader = 6 then r7 = 1
   r8 = DL.WaitForSequence("DFED04", 1, 3000)
   r9 = DL.WaitForSequence("DFED05", 1, 3000)
   if reader = 7 then r10 = DL.WaitForSequence("DFED06", 1, 500)
   if reader = 6 then r10 = 1
   if reader = 7 then r11 = DL.WaitForSequence("DFED07", 1, 500)
   if reader = 6 then r11 = 1
   r12 = DL.WaitForSequence("DFED27", 1, 3000)
   if reader = 7 then r14 = DL.WaitForSequence("DFEF77", 1, 500)
   if reader = 6 then r14 = 1

   if r1 = 0 or r2 = 0 or r3 = 0 or r4 = 0 or r5 = 0 or r6 = 0 or r7 = 0 or r8 = 0 or r9 = 0 or r10 = 0 or r11 = 0 or r12 = 0 or r14 = 0 then result = 0
   if r1 = 0 then dl.addcomment vbcrlf & "Tag DFEE3B: FAIL"
   if r2 = 0 then dl.addcomment vbcrlf & "Tag DFEE3C: FAIL"
   if r3 = 0 then dl.addcomment vbcrlf & "Tag DFEE3D: FAIL"
   if r4 = 0 then dl.addcomment vbcrlf & "Tag DFEF25: FAIL"
   if r5 = 0 then dl.addcomment vbcrlf & "Tag DFED01: FAIL"
   if r6 = 0 then dl.addcomment vbcrlf & "Tag DFED02: FAIL"
   if r7 = 0 then dl.addcomment vbcrlf & "Tag DFED03: FAIL"
   if r8 = 0 then dl.addcomment vbcrlf & "Tag DFED04: FAIL"
   if r9 = 0 then dl.addcomment vbcrlf & "Tag DFED05: FAIL"
   if r10 = 0 then dl.addcomment vbcrlf & "Tag DFED06: FAIL"
   if r11 = 0 then dl.addcomment vbcrlf & "Tag DFED07: FAIL"
   if r12 = 0 then dl.addcomment vbcrlf & "Tag DFED27: FAIL"
   if r14 = 0 then dl.addcomment vbcrlf & "Tag DFEF77: FAIL"
end if

DL.AddComment vbCrLf
'============================================================
DL.AddComment "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)

Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""
'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'DL.pause 1000

'If result = 0 then
'   DL.AddComment Chr(13) & "Result = FAILED"
'Else
'   DL.AddComment Chr(13) & "Result = PASSED"
'End If

'If Prompting(0) = "ON" Then
'   If result = 0 then
'      MsgBox "Result = FAILED", VBOKOnly, "Result"
'   Else 
'      MsgBox "Result = PASSED", VBOKOnly, "Result"
'   End If
'End If
'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------
'If MasterResult = 1 Then
'   MasterVerdict = "PASSED"
'ElseIf MasterResult = 0 Then
'       MasterVerdict = "FAILED"
'End If
'result = MasterResult
'DL.AddComment vbCrLf
'DL.AddComment "MASTER RESULT = " & MasterVerdict
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
   FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
       FileOutput.WriteLine "1|PASS|OK"
End If
FileOutput.CloseFile

Sub DL_OnSend()
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Right(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Left(crcStr, 2)) ' high byte
    End If
End Sub
