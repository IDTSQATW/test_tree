DL_SCRIPTVERSION
1
43384

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "MF000200" ' !!!!! EDIT THIS !!!!!

'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile "C:\vivotech\regress\regression\regress_test\test_tree\Regress.Config"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description	
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
	
  'Display Test Steps 	
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()	 
  Prompting(1) = result

  'Set Docklight COM Port	
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()	 
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()	 
  POSBaudRate(1) = result
	
Loop

Sub StepPrompt(PromptString)
	DL.AddComment PromptString
	If Prompting(1) = "ON" Then
		MsgBox PromptString, VBOKOnly, "Test Step"
	Else
	End If
	
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
DL.StartCommunication
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm

result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 1

Sub PrintMyResult(ResultX)

	If ResultX = 0 Then
		MasterResult = 0
		DL.AddComment "Result = FAILED"
	ElseIf ResultX = 1 Then
		DL.AddComment "Result = PASSED"
	End If

End Sub

Function ReverseResult(ResultParam)
	If ResultParam = 1 Then
		result = 0
	ElseIf ResultParam = 0 Then
		result = 1
	End If
End Function

'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
	DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
	MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function

'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------

'Start_Test
MyInput = MsgBox("Did you run populate BLOCK script?", VBYesNo, "Test Step")

If MyInput = 6 Then
	Start_Test
ElseIf MyInput = 7 Then
	MsgBox "Sorry you cannot run this test until you run the populate BLOCK script", VBOKOnly, "Test Msg"

End If


Sub Start_Test()
PT_Start
DL.AddComment "----- Read 1 Block and start at Block 0. -----"
DL.SendSequence "MiFare Read 1 Block - Start at Block 0"
result = DL.WaitForSequence("MiFare Read 1 Block - Start at Block 0 - (OK)", 1, 10000)
PrintMyResult(result)

'PT_Start
DL.AddComment "----- Read 3 Block and start at Block 0 (Blocks 0,1, and 2 are read). -----"
DL.SendSequence "MiFare Read 3 Block - Start at Block 0"
result = DL.WaitForSequence("MiFare Read 3 Block - Start at Block 0 - (OK)", 1, 10000)
PrintMyResult(result)

'PT_Start
DL.AddComment "----- Read 5 Block and start at Block 0 (Blocks 0,1,2,4 and 5 are read --- Trailer Block 3 is skipped). -----"
DL.SendSequence "MiFare Read 5 Block - Start at Block 0"
result = DL.WaitForSequence("MiFare Read 5 Block - Start at Block 0 - (OK)", 1, 10000)
PrintMyResult(result)

'PT_Start
DL.AddComment "----- Read 15 Block and start at Block 0 (Blocks 0 to 18 are read --- Trailer Blocks 3, 7, 11, and 15 are skipped). -----"
DL.SendSequence "MiFare Read 15 Block - Start at Block 0"
result = DL.WaitForSequence("MiFare Read 15 Block - Start at Block 0 - (OK)", 1, 10000)
PrintMyResult(result)

'PT_Start
DL.AddComment "----- Read 15 Block and start at Block 19 (Blocks 19 to 38 are read --- Trailer Blocks 19, 23, 27, 31, 35 are skipped). -----"
DL.SendSequence "MiFare Read next 15 Block - Start at Block 19"
result = DL.WaitForSequence("MiFare Read next 15 Block - Start at Block 19 - (OK)", 1, 10000)
PrintMyResult(result)

'PT_Start
DL.AddComment "----- Read 15 Block and start at Block 39 (Blocks 39 to 58 are read --- Trailer Blocks 39, 43, 47, 51, 55 are skipped). -----"
DL.SendSequence "MiFare Read next 15 Block - Start at Block 39"
result = DL.WaitForSequence("MiFare Read next 15 Block - Start at Block 39 - (OK)", 1, 10000)
PrintMyResult(result)

'PT_Start
DL.AddComment "----- Read 2 Block and start at Block 59 (Blocks 59 to 61 are read --- Trailer Block 59 is skipped). -----"
DL.SendSequence "MiFare Read next 2 Block - Start at Block 59"
result = DL.WaitForSequence("MiFare Read next 2 Block - Start at Block 59 - (OK)", 1, 10000)
PrintMyResult(result)

'PT_Start
DL.AddComment "----- Read 3 Block and start at Block 59 (Blocks 59 to 62 are read --- Trailer Block 59 is skipped). -----"
DL.SendSequence "MiFare Read next 3 Block - Start at Block 59"
result = DL.WaitForSequence("MiFare Read next 3 Block - Start at Block 59 or 60 - (OK)", 1, 10000)
PrintMyResult(result)

'PT_Start
DL.AddComment "----- Read 2 Block and start at Block 61 (Blocks 61 to 62 are read). -----"
DL.SendSequence "MiFare Read next 2 Block - Start at Block 61"
result = DL.WaitForSequence("MiFare Read next 2 Block - Start at Block 61 - (OK)", 1, 10000)
PrintMyResult(result)

'PT_Start
DL.AddComment "----- Read 1 Block and start at Block 62 (Block 62 is read). -----"
DL.SendSequence "MiFare Read next 1 Block - Start at Block 62"
result = DL.WaitForSequence("MiFare Read next 1 Block - Start at Block 62 - (OK)", 1, 10000)
PrintMyResult(result)

DL.AddComment "----- Read 1 Block and start at Block 63 (Block 63 is read --- Block 63 is a Trailer Block, but not skipped because this is a single read and not multiple block read). -----"
DL.SendSequence "MiFare Read next 1 Block - Start at Block 63"
result = DL.WaitForSequence("MiFare Read next 1 Block - Start at Block 63 (OK)", 1, 10000)
PrintMyResult(result)

DL.AddComment "----- Read 2 Block and start at Block 63 (No blocks are read because there is nothing beyond Block 63). -----"
DL.SendSequence "MiFare Read next 2 Block - Start at Block 63"
result = DL.WaitForSequence("MiFare Read Error Expected - (OK)", 1, 10000)
PrintMyResult(result)

PT_Start
DL.AddComment "----- Read 1 Block and start at Block 35 (Block 35 is read --- Block 35 is a Trailer Block, but not skipped because this is a single read and not multiple block read). -----"
DL.SendSequence "MiFare Read next 1 Block - Start at Block 35"
result = DL.WaitForSequence("MiFare Read next 1 Block - Start at Block 35 (OK)", 1, 10000)
PrintMyResult(result)

End Sub

Sub PT_Start()
DL.ResetReceiveCounter "PT command (OK)"
DL.ResetReceiveCounter "Antenna Enable (OK)"
DL.ResetReceiveCounter "Poll for Token (OK)"
DL.ResetReceiveCounter "MiFare Read Error Expected - (OK)"

DL.SendSequence "PT Start"
result = DL.WaitForSequence("PT command (OK)", 1, 10000)
PrintMyResult(result)
DL.ResetReceiveCounter "PT command (OK)"

DL.SendSequence "Antenna Enable"
result = DL.WaitForSequence("Antenna Enable (OK)", 1, 10000)
PrintMyResult(result)

DL.SendSequence "Poll for Token (10 sec)"
result = DL.WaitForSequence("Poll for Token (OK)", 1, 10000)
PrintMyResult(result)

'DL.SendSequence "MiFare Read 1 Block - Start at Block 0"
'result = DL.WaitForSequence("MiFare Read next 3 Block 59", 1, 10000)

End Sub

'Do
'    DL.Pause 1 ' (the pause reduces CPU load while idle)
'Loop

'===============================================
'Pass Through CRC Calculation
'===============================================
Sub DL_OnSend()
    ' For all Send Sequences with minimum 3 bytes length (one byte user data,
    ' two bytes CRC, perform the following manipulation:
    ' - Calculate a 16 bit crc value on the characters 1 .. (DL.OnSend_Size() - 2)
    ' - Write the low byte to character no. DL.OnSend_GetSize()-1
    ' - Write the high byte to character no. DL.OnSend_GetSize()
    ' Example:
    ' Send Sequence name: MyCommand
    ' Send Sequence in HEX representation: 02 04 00 00 00 01 00 00
    ' --> Data transmitted by Docklight:   02 04 00 00 00 01 31 F9
    '     (with "31" as the low byte CRC, "F9" as the high byte)

    ' Check if there is at least one byte of user data
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Left(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Right(crcStr, 2)) ' high byte
    End If
End Sub


DL.Pause 1500
DL.AddComment vbCrLf
PrintMyResult(result)

DL.AddComment "---------- END OF TEST ----------" & vbCrLf

'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.pause 1000

If result = 0 then
  DL.AddComment Chr(13) & "Result = FAILED"
Else
  DL.AddComment Chr(13) & "Result = PASSED"
End If

If Prompting(0) = "ON" Then
  If result = 0 then
    MsgBox "Result = FAILED", VBOKOnly, "Result"
  Else 
    MsgBox "Result = PASSED", VBOKOnly, "Result"
  End If
End If

'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------

If MasterResult = 1 Then
	MasterVerdict = "PASSED"
ElseIf MasterResult = 0 Then
	MasterVerdict = "FAILED"
End If
result = MasterResult
DL.AddComment vbCrLf
DL.AddComment "MASTER RESULT = " & MasterVerdict

'------------------------------------------------------------
' WRITE FINAL VERDICT FILE(!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile

