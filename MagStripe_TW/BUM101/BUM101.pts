DL_SCRIPTVERSION
1
54703

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "BUM101" ' !!!!! EDIT THIS !!!!!
' Objective: JIRA#FU-53
' [UniPay 1.5][v1.02.036.1] Reader can not return burst mode data after canceled cmd 02-40.
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config2"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result

  'Set Reader Type
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerType = result

  'Set Reader Model
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerModel = result

  'Set Reader FW version
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwVersion = result

  'Set Reader FW build
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwBuild = result

  'Set Reader General Flag
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  genFlag = result
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub

Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function

'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function

'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
readercheck = msgbox ("Does reader support CT function?", vbyesno)

If result <> 0 Then
   DL.ResetReceiveCounter
   DL.AddComment "--- Auto Poll"
   DL.SendSequence "Auto Poll"
   result = DL.WaitForSequence("Change Poll Mode Response", 1, 3000)
   DL.Pause 400
End If

If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Burst Mode On"
   if readerType = "GR" or readerType = "NEO1" or readerType = "USAT" then DL.SendSequence "Burst Mode On"
   if readerType = "NEO2" then DL.SendSequence "Burst Mode On (NEO2)"
   result = DL.WaitForSequence("Configuration Change Response", 1, 3000)
   dl.pause 400
End If

if readercheck = 6 then
If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-16 Contact Set ICS Identification (02 = Default)"
   DL.SendSequence "60-16 Contact Set ICS Identification (02 = Default)"
   result = DL.WaitForSequence("60 00", 1, 3000)
   DL.Pause 400
End If

If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-03 Contact Set Application Data (VISA)"
   DL.SendSequence "60-03 Contact Set Application Data (VISA)"
   result = DL.WaitForSequence("60 00", 1, 3000)
   DL.Pause 400
End If

If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-06 Contact Set Terminal Data (9f39=05"
   DL.SendSequence "60-06 Contact Set Terminal Data (9f39=05"
   result = DL.WaitForSequence("60 00", 1, 3000)
   DL.Pause 400
End If
end if

if result <> 0 then
for k = 2 to 2
    If result <> 0 Then
       DL.ResetReceiveCounter
       dl.addcomment vbcrlf
       DL.AddComment "--- cmd 02-01 >> cancel"
       DL.SendSequence "02-01"
       dl.pause 1000
       DL.SendSequence "05-01"
       result = DL.WaitForSequence("05 00", 1, 5000)
       if result <> 0 then
          dl.pause 800
          msgbox "Click OK --> Swipe IDT Test Card", vbokonly
          result = DL.WaitForSequence("burst data", 1, 6000)
          dl.pause 1000
       end if
    End If

    If result <> 0 Then
       DL.ResetReceiveCounter
       dl.addcomment vbcrlf
       DL.AddComment "--- cmd 02-40 >> cancel"
       DL.SendSequence "02-40"
       dl.pause 1000
       DL.SendSequence "05-01"
       result = DL.WaitForSequence("05 00", 1, 5000)
       if result <> 0 then
          dl.pause 800
          msgbox "Click OK --> Swipe IDT Test Card", vbokonly
          result = DL.WaitForSequence("burst data", 1, 6000)
          dl.pause 1000
       end if
    End If
    
    if readercheck = 6 then
    If result <> 0 Then
       DL.ResetReceiveCounter
       dl.addcomment vbcrlf
       DL.AddComment "--- cmd 60-10 >> cancel"
       DL.SendSequence "60-10"
       dl.pause 1200
       DL.SendSequence "05-01"
       result = DL.WaitForSequence("05 00", 1, 5000)
       if result <> 0 then
          dl.pause 800
          msgbox "Click OK --> Swipe IDT Test Card", vbokonly
          result = DL.WaitForSequence("burst data", 1, 6000)
          dl.pause 1000
       end if
    End If
    end if
next
end if
'------------------------------------------------------------
DL.AddComment vbCrLf

DL.AddComment "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""

'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'DL.pause 1000

'If 0 Then
'If result = 0 then
'  DL.AddComment Chr(13) & "Result = FAILED"
'Else
'  DL.AddComment Chr(13) & "Result = PASSED"
'End If
'End If

'If Prompting(0) = "ON" Then
'  If result = 0 then
'    MsgBox "Result = FAILED", VBOKOnly, "Result"
'  Else 
'    MsgBox "Result = PASSED", VBOKOnly, "Result"
'  End If
'End If
'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------
'If MasterResult = 1 Then
'      MasterVerdict = "PASSED"
'ElseIf MasterResult = 0 Then
'      MasterVerdict = "FAILED"
'End If
'result = MasterResult
'DL.AddComment vbCrLf
'DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 

Sub DL_OnSend()
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Right(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Left(crcStr, 2)) ' high byte
    End If
End Sub
