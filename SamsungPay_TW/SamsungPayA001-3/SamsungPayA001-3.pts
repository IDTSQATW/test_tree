DL_SCRIPTVERSION
1
19814

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "SamsungPayA001-3" ' !!!!! EDIT THIS !!!!!
'Objective: Encrypted SamsungPay data with AES
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config2"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result

  'Set Reader Type
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerType = result

  'Set Reader Model
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerModel = result

  'Set Reader FW version
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwVersion = result

  'Set Reader FW build
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwBuild = result

  'Set Reader General Flag
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  genFlag = result
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
'DL.StartCommunication
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
result = 1

Err0BCounter = 0
RxStatus = 0

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub

Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function

sub precondition()
    if result <> 0 then  
       dl.resetreceivecounter
       dL.AddComment  vbCrLf
       dl.addcomment "Erase All Keys..."
       dl.sendsequence "Erase All Key (83-00)"
       result = dl.waitforsequence("Erase all key successfully", 1, 2000)
       dl.pause 200
    end if
     if result <> 0 then
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "Set DUKPT Key Encryption Type..."
       dl.sendsequence "1-use AES to encrypt (C7-32)"
       result = dl.waitforsequence("Set encryption type successfully", 1, 2000)
       dl.pause 200
     end if 
       if result <> 0 then
          dl.resetreceivecounter
          dl.addcomment vbcrlf
          dl.addcomment "Get DUKPT Key Encryption Type..."
          dl.sendsequence "Get account DUKPT encryption type (C7-33)"
          result = dl.waitforsequence("Check encryption - AES", 1, 2000)
          dl.pause 200
       end if
 
    if result <> 0 then
       dl.addcomment vbcrlf
       dl.addcomment "Loading DUKPT key..."
       dl.resetreceivecounter
       dl.sendsequence "Load Plaintext Key - command 1 (80-00)"
       result = dl.waitforsequence("Load Plaintext Key successfully", 1, 2000)
       dl.pause 200
       if result <> 0 then
          dl.resetreceivecounter
          dl.sendsequence "Load Plaintext Key - command 2  (80-00)"
          result = dl.waitforsequence("Load Plaintext Key successfully", 1, 2000)
          dl.pause 200
       end if 
          if result <> 0 then
             dl.resetreceivecounter
             dl.sendsequence "Load Encrypted KPK (80-01)"
             result = dl.waitforsequence("Load Plaintext Key successfully", 1, 2000)
             dl.pause 200
          end if
             if result <> 0 then
                dl.resetreceivecounter
                dl.sendsequence "Enter DUKPT Key (81-00)"
                result = dl.waitforsequence("Load DUKPT Key successfully", 1, 2000)
                dl.pause 200   
             end if 
                if result <> 0 then
                   dl.resetreceivecounter
                   dl.sendsequence "Enable Data Encryption  (C7-36) - 03"
                   result = dl.waitforsequence("Data Encryption enable", 1, 2000)
                   dl.pause 200
                end if
                    if result <> 0 then
                       dl.resetreceivecounter
                       dl.sendsequence "Get Data Encryption (C7-37)"
                       result = dl.waitforsequence("Data Encryption - 03", 1, 2000)
                       dl.pause 200
                    end if
    end if
end sub

sub POM()
    If result <> 0 Then
       dl.resetreceivecounter
       DL.AddComment vbCrLf & vbCrLf & "Poll on Demand"
       DL.SendSequence "Poll on Demand (01-01)"
       result = DL.WaitForSequence("Poll mode response", 1, 10000)
    End If
end sub

sub AUTOPOL()
    If result <> 0 Then
       dl.resetreceivecounter 
       DL.AddComment vbCrLf & vbCrLf & "Auto Poll"
       DL.SendSequence "Auto Poll (01-01)"
       result = DL.WaitForSequence("Poll mode response", 1, 10000)
    End If
end sub
'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function
'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
if result <> 0 then
   dl.resetreceivecounter
   DL.AddComment vbCrLf & vbCrLf & "--- Burst Off (04-00)"
   if readerType <> "NEO2" then
      DL.SendSequence "Burst Off (04-00)"
   else
      DL.SendSequence "Burst Off (04-00) (NEO2)"
   end if
   result = DL.WaitForSequence("Burst mode response", 1, 5000)
   dl.pause 400
end if
'----------------------------------------------------------
'Poll on Demand/ cmd 02-40
'----------------------------------------------------------
POM()

if result <> 0 then
   if readerType <> "NEO2" then
      precondition()
   else
      if result <> 0 then
         dl.resetreceivecounter
         dl.addcomment "Get DUKPT Key Encryption Type = AES"
         dl.sendsequence "Get account DUKPT encryption type (C7-33)"
         result = dl.waitforsequence("Check encryption - AES", 1, 2000)
         if result = 0 then
            dl.resetreceivecounter
            dl.addcomment "Get DUKPT DEK Attribution based on KeySlot (C7-A3)"
            dl.sendsequence "Get DUKPT DEK Attribution based on KeySlot (C7-A3)"
            result = dl.waitforsequence("C7-A3 resp", 1, 2000)
         end if

         if result <> 0 then
            dl.resetreceivecounter
            dl.addcomment vbcrlf
            dl.sendsequence "Get Data Encryption (C7-37)"
            result = dl.waitforsequence("Data Encryption - 03", 1, 2000)
            dl.pause 200
         end if
      end if
      if result = 0 then dl.addcomment vbcrlf & "*** Please loaded data key (AES) & enabled encryption (03) by manual first..."
   end if

   if result <> 0 then
      dl.resetreceivecounter
      DL.AddComment vbCrLf & vbCrLf & "--- Activate transaction response - Samsungpay"
      msgbox "Click OK --> Tap Samsung mobile phone w/ SamsungPay"
      DL.SendSequence "Activate Transaction (02-40) - 9F02"
      if readerType <> "NEO2" then
         RxStatus = DL.WaitForSequence("Activate transaction response - Samsungpay", 1, 10000)
      else
         RxStatus = DL.WaitForSequence("Activate transaction response - Samsungpay (NEO2)", 1, 10000)
      end if
      dl.pause 1000
      If RxStatus = 0 then
         DL.AddComment "Samsungpay 02-40 RX does not return expected data"
         Err0BCounter = Err0BCounter + 1
      End If
   end if
end if
'-------------------------------------------------------
'Auto poll/ cmd 03-40
'---------------------------------------------------------
AUTOPOL()

if result <> 0 then
   if readerType <> "NEO2" then precondition()
 
   if result <> 0 then
      dl.resetreceivecounter
      DL.AddComment vbCrLf & vbCrLf & "--- Get transaction result response - Samsungpay"
      msgbox "Tap Samsung mobile phone w/ SamsungPay --> Click OK"
      DL.SendSequence "03-40 Get Transaction Result"
      if readerType <> "NEO2" then
         RxStatus = DL.WaitForSequence("get transaction result response - Samsungpay", 1, 5000)
      else
         RxStatus = DL.WaitForSequence("get transaction result response - Samsungpay (NEO2)", 1, 5000)
      end if
      dl.pause 1000
      If RxStatus = 0 then
         DL.AddComment "Samsungpay 03-40 RX does not return expected data"
         Err0BCounter = Err0BCounter + 1
      End If
   end if
end if
'-----------------------------------------------------------
If Err0BCounter <> 0 Then
   DL.AddComment vbCRLf & vbCRLf & Err0BCounter & " command(s) found, which did not return proper card data as expected. Please check the log file for details." 
   result = 0
End If
'------------------------------------------------------------
dl.addcomment vbcrlf
DL.AddComment "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""
'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'DL.pause 1000

'If 0 Then
'If result = 0 then
'  DL.AddComment Chr(13) & "Result = FAILED"
'Else
'  DL.AddComment Chr(13) & "Result = PASSED"
'End If
'End If

'If Prompting(0) = "ON" Then
'  If result = 0 then
'    MsgBox "Result = FAILED", VBOKOnly, "Result"
'  Else 
'    MsgBox "Result = PASSED", VBOKOnly, "Result"
'  End If
'End If
'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------
'If MasterResult = 1 Then
'      MasterVerdict = "PASSED"
'ElseIf MasterResult = 0 Then
'      MasterVerdict = "FAILED"
'End If
'result = MasterResult
'DL.AddComment vbCrLf
'DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 

Sub DL_OnSend()
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Right(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Left(crcStr, 2)) ' high byte
    End If
End Sub
