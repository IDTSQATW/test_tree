DL_SCRIPTVERSION
1
44882

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "EDMT04-1" ' !!!!! EDIT THIS !!!!!
' Objective: 
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config2"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result

  'Set Reader Type
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerType = result

  'Set Reader Model
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerModel = result

  'Set Reader FW version
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwVersion = result

  'Set Reader FW build
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwBuild = result

  'Set Reader General Flag
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  genFlag = result
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
dim r(15)
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
countf = 0
result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub


Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function

sub countfail()
    for j = 0 to 4
        if r(j) = 0 then
           countf = countf + 1
        end if
    next
end sub

sub precondition()
    dl.resetreceivecounter
    dl.addcomment vbcrlf
    dl.addcomment "Erase All Keys..."
    dl.sendsequence "Erase All Keys"
    result = dl.waitforsequence("erase key ok", 1, 2000)
    dl.pause 500
    if result <> 0 then
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "Set DUKPT Key Encryption Type..."
       dl.sendsequence "0-use TDES to encrypt (C7-32)"
       result = dl.waitforsequence("set dukpt type", 1, 2000)
       dl.pause 500
       if result <> 0 then
          dl.resetreceivecounter
          dl.addcomment vbcrlf
          dl.addcomment "Get DUKPT Key Encryption Type..."
          dl.sendsequence "Get account DUKPT encryption type (C7-33)"
          result = dl.waitforsequence("get dukpt type", 1, 2000)
          dl.pause 500
          if result <> 0 then
             dl.addcomment vbcrlf & "OK!"
          else
             dl.addcomment vbcrlf & "Get DUKPT Key Encryption Type: FAIL!"
          end if
       else
          dl.addcomment vbcrlf & "Set DUKPT Key Encryption Type: FAIL!"
       end if
    else
       dl.addcomment vbcrlf & "Erase All Keys: FAIL!"
    end if
end sub

sub loadkey_D()
    dl.addcomment vbcrlf
    dl.addcomment "Loading DUKPT key..."
       dl.resetreceivecounter
       dl.sendsequence "Load Plaintext KPK Component (the 1st)"
       result = dl.waitforsequence("load kpk ok", 1, 2000)
       dl.pause 500
       if result <> 0 then
          dl.resetreceivecounter
          dl.sendsequence "Load Plaintext KPK Component (the last)"
          result = dl.waitforsequence("load kpk ok", 1, 2000)
          dl.pause 500
          if result <> 0 then
             dl.resetreceivecounter
             dl.sendsequence "Load KPK"
             result = dl.waitforsequence("load kpk ok", 1, 2000)
             dl.pause 500
             if result <> 0 then
                dl.resetreceivecounter
                dl.sendsequence "Load DUKPT key (key index 5)"
                result = dl.waitforsequence("dukpt ok", 1, 2000)
                dl.pause 500
                if result <> 0 then
                   dl.addcomment vbcrlf & "OK!"
                else
                   dl.addcomment vbcrlf & "Load DUKPT key (key index 5): FAIL!"
                end if
             else
                dl.addcomment vbcrlf & "Load KPK: FAIL!"
             end if
          else
             dl.addcomment vbcrlf & "Load Plaintext KPK Component (the last): FAIL!"
          end if
       else
          dl.addcomment vbcrlf & "Load Plaintext KPK Component (the 1st): FAIL!"
       end if 
end sub
'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function

'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Poll on Demand"
   DL.SendSequence "Poll on Demand"
   result = DL.WaitForSequence("Poll Response", 1, 2000)
   dl.pause 500
else 
   countf = countf + 1
End If
'------------------------------------------------------------
If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Burst mode Off"
   if readerType = "GR" or readerType = "NEO1" then DL.SendSequence "burst mode off"
   if readerType = "NEO2" then DL.SendSequence "burst mode off (NEO2)"
   result = DL.WaitForSequence("burst off", 1, 2000)
   dl.pause 500
else 
   countf = countf + 1
End If
'------------------------------------------------------------
If result <> 0 Then
   for i = 1 to 7

   DL.ClearCommWindows
   '------------------------------------------------------------
   if readerType = "GR" or readerType = "NEO1" then
   precondition()
   if result <> 0 then
       loadkey_D()
   end if
   end if
'------------------------------------------------------------
   if result <> 0 then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Data Encryption: Enable"
      DL.SendSequence "Data Encryption Enable (C7-36)"
      result = DL.WaitForSequence("enc on", 1, 2000)
else 
   countf = countf + 1
end if
'------------------------------------------------------------
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   if i = 1 then DL.AddComment "--- 04-00-----DFEF4B = 64 T1+T1 Sentinel+PAN"
   if i = 2 then DL.AddComment "--- 04-00-----DFEF4B = 52 T2+T2 Sentinel+PAN"
   if i = 3 then DL.AddComment "--- 04-00-----DFEF4B = 49 T3+T3 Sentinel+PAN"
   if i = 4 then DL.AddComment "--- 04-00-----DFEF4B = 76 T1+T2+T1 Sentinel+T2 Sentinel+PAN"
   if i = 5 then DL.AddComment "--- 04-00-----DFEF4B = 6D T1+T3+T1 Sentinel+T3 Sentinel+PAN"
   if i = 6 then DL.AddComment "--- 04-00-----DFEF4B = 5B T2+T3+T2 Sentinel+T3 Sentinel+PAN"
   if i = 7 then DL.AddComment "--- 04-00-----DFEF4B = 7F T1+T2+T3+T1 Sentinel+T2 Sentinel+T3 Sentinel+PAN"
   DL.SendSequence "04-00-----DFEF4B " & i
   result = DL.WaitForSequence("burst off", 1, 10000)

   MsgBox "Click OK and then Swipe ISO4909", VBOKOnly
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-40 Activate Transaction"
   DL.SendSequence "02-40"
   result = DL.WaitForSequence("ACT response - iso4909", 1, 10000)
           if result = 0 then dl.addcomment vbcrlf & "ACT response...FAIL!"

   if result <> 0 then
      r(0) = dl.waitforsequence("Tag 9F39", 1, 1000)
           if r(0) = 0 then dl.addcomment vbcrlf & "Tag 9F39...FAIL!"
      if readerType = "GR" or readerType = "NEO1" then r(1) = dl.waitforsequence("Tag FFEE01", 1, 1000)
      if readerType = "NEO2" then r(1) = dl.waitforsequence("Tag FFEE01 (NEO2)", 1, 1000)
           if r(1) = 0 then dl.addcomment vbcrlf & "Tag FFEE01...FAIL!"
      r(2) = dl.waitforsequence("Tag DFEE26", 1, 1000)
           if r(2) = 0 then dl.addcomment vbcrlf & "Tag DFEE26...FAIL!"
      r(3) = dl.waitforsequence("DFEF4C " & i, 1, 1000)
           if r(3) = 0 then dl.addcomment vbcrlf & "DFEF4C...FAIL!"
      r(4) = dl.waitforsequence("DFEF4D " & i, 1, 1000)
           if r(4) = 0 then dl.addcomment vbcrlf & "DFEF4D...FAIL!"

      countfail()

   '------------------------------------------------------------
   else 
      countf = countf + 1
   end if
   dl.pause 500
   next
End If
'------------------------------------------------------------
if countf <> 0 then
   result = 0
   dl.addcomment vbcrlf
   dl.addcomment "=============="
   dl.addcomment "FAIL items: " & countf
   dl.addcomment "=============="
else
   result = 1
end if

DL.AddComment vbcrlf & "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""

'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'DL.pause 1000

'If result = 0 then
'  DL.AddComment Chr(13) & "Result = FAILED"
'Else
'  DL.AddComment Chr(13) & "Result = PASSED"
'End If

'If Prompting(0) = "ON" Then
'  If result = 0 then
'    MsgBox "Result = FAILED", VBOKOnly, "Result"
'  Else 
'    MsgBox "Result = PASSED", VBOKOnly, "Result"
'  End If
'End If
'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------

If MasterResult = 1 Then
      MasterVerdict = "PASSED"
ElseIf MasterResult = 0 Then
      MasterVerdict = "FAILED"
End If
result = MasterResult
DL.AddComment vbCrLf
DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 

Sub DL_OnSend()
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Right(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Left(crcStr, 2)) ' high byte
    End If
End Sub
