DL_SCRIPTVERSION
1
48503

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "MF010800" ' !!!!! EDIT THIS !!!!!

'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description	
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
	
  'Display Test Steps 	
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()	 
  Prompting(1) = result

  'Set Docklight COM Port	
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()	 
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()	 
  POSBaudRate(1) = result
	
Loop

Sub StepPrompt(PromptString)
	DL.AddComment PromptString
	If Prompting(1) = "ON" Then
		MsgBox PromptString, VBOKOnly, "Test Step"
	Else
	End If
	
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
'DL.StartCommunication
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub

Function ReverseResult(ResultParam)
	If ResultParam = 1 Then
		result = 0
	ElseIf ResultParam = 0 Then
		result = 1
	End If
End Function

'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
	DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
	MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function

'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------

'MsgBox "This script will test MF0102.00, MF0103.00, and MF0104.00." & vbCrLf & "PLEASE take MiFare 1K card and place it on the landing zone. DO NOT REMOVE CARD UNTIL PROMPTED TO DO SO!!!", VBOKOnly, "Message"

InitializeCard
TheTest
SetCardToDefault
MsgBox "You MAY NOW REMOVE THE CARD.", VBOKOnly, "Test Step"

'#------------------------
'# Initialize the card
'#------------------------

Sub InitializeCard()
PT_Setup

dl.addcomment vbcrlf & "Start Initialize Card..." & vbcrlf
DL.AddComment "----- MsgBox Start Initialize Card... -----" & vbcrlf

'# Authenticate card with FF FF FF FF FF FF
dl.addcomment vbcrlf & "You are about to authenticate Block 54 with valid Key A." & vbcrlf
DL.SendSequence "Authenticate Block 54 - CORRECT2"
result = DL.WaitForSequence("PT Command (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "PT Command (OK)"

'# Write Key A, Block 55 - 11 22 33 44 55 66
dl.addcomment vbcrlf & "Writing Key A = 11 22 33 44 55 66 to card." & vbcrlf
DL.SendSequence "Write Key A, Block 55 - 11 22 33 44 55 66"
result = DL.WaitForSequence("PT Command (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "PT Command (OK)"

'# Authenticate card with FF FF FF FF FF FF
dl.addcomment vbcrlf & "You are about to authenticate Block 49 with valid Key A." & vbcrlf
DL.SendSequence "Authenticate Block 49 - CORRECT2"
result = DL.WaitForSequence("PT Command (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "PT Command (OK)"

dl.addcomment vbcrlf & "Initialize Card - COMPLETE" & vbcrlf

End Sub
'#--------------------------

Sub PT_Setup()
	DL.AddComment "----- PT START -----"
	DL.SendSequence "PT Start"
	result = DL.WaitForSequence("PT Command (OK)", 1, 5000)
	DL.ResetReceiveCounter "PT Command (OK)"

	DL.SendSequence "Antenna Enable"
	result = DL.WaitForSequence("Antenna Enable (OK)", 1, 5000)
	DL.ResetReceiveCounter "Antenna Enable (OK)"

	MsgBox "Press OK, then tap card", VBOKOnly, "Test Step"
	DL.SendSequence "Poll for Token (10 sec)"
	dl.pause 1000
	DL.ResetReceiveCounter "Poll for Token (OK)"
End Sub

Sub TheTest()
'PT_Setup

DL.AddComment "----- Read Block 49 -----"
DL.SendSequence "Read Block 49"
result = DL.WaitForSequence("Block Read (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "Block Read (OK)"

DL.AddComment "----- Read Block 50 -----"
DL.SendSequence "Read Block 50"
result = DL.WaitForSequence("Block Read (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "Block Read (OK)"

DL.AddComment "----- Read Block 51 -----"
DL.SendSequence "Read Block 51"
result = DL.WaitForSequence("Block Read (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "Block Read (OK)"

DL.AddComment "----- Authenticate Block 54 -----" & vbcrlf

DL.SendSequence "Authenticate Block 54 - CORRECT1"
result = DL.WaitForSequence("PT Command (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "PT Command (OK)"

DL.AddComment "----- Read Block 54 -----"
DL.SendSequence "Read Block 54"
result = DL.WaitForSequence("Block Read (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "Block Read (OK)"

DL.AddComment "----- Read Block 55 -----"
DL.SendSequence "Read Block 55"
result = DL.WaitForSequence("Block Read (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "Block Read (OK)"

DL.AddComment "----- Authenticate Block 49 - CORRECT2 -----" & vbcrlf

DL.SendSequence "Authenticate Block 49 - CORRECT2"
result = DL.WaitForSequence("PT Command (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "PT Command (OK)"

'DL.AddComment "----- Read Block 56 -----"
'DL.SendSequence "Read Block 56"
'result = DL.WaitForSequence("Block Read (OK)", 1, 5000)
'PrintMyResult(result)
'DL.ResetReceiveCounter "Block Read (OK)"

'DL.AddComment "----- Read Block 57 -----"
'DL.SendSequence "Read Block 57"
'result = DL.WaitForSequence("Block Read (OK)", 1, 5000)
'PrintMyResult(result)
'DL.ResetReceiveCounter "Block Read (OK)"

DL.AddComment "----- Read Block 49 -----"
DL.SendSequence "Read Block 49"
result = DL.WaitForSequence("Block Read (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "Block Read (OK)"

DL.AddComment "----- Read Block 50 -----"
DL.SendSequence "Read Block 50"
result = DL.WaitForSequence("Block Read (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "Block Read (OK)"

DL.AddComment "----- Read Block 51 -----"
DL.SendSequence "Read Block 51"
result = DL.WaitForSequence("Block Read (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "Block Read (OK)"

dl.addcomment vbcrlf & "TEST COMPLETE" & vbcrlf

End Sub

'#---------------------------
'# Set Card Back to Default
'#---------------------------

Sub SetCardToDefault()
PT_Setup

dl.addcomment vbcrlf & "Start Set Card To Default..." & vbcrlf

'# Authenticate card with 11 22 33 44 55 66
dl.addcomment vbcrlf & "You are about to authenticate Block 54 with valid Key A." & vbcrlf
DL.SendSequence "Authenticate Block 54 - CORRECT1"
result = DL.WaitForSequence("PT Command (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "PT Command (OK)"

'# Write Key A, Block 55 - FF FF FF FF FF FF
dl.addcomment vbcrlf & "Writing Key A = FF FF FF FF FF FF to card." & vbcrlf
DL.SendSequence "Write Key A, Block 55 - FF FF FF FF FF FF"
result = DL.WaitForSequence("PT Command (OK)", 1, 5000)
PrintMyResult(result)
DL.ResetReceiveCounter "PT Command (OK)"
DL.SendSequence "PT Stop"
dl.pause 500

dl.addcomment vbcrlf & "Set Card To Default - COMPLETE" & vbcrlf

End Sub

'#---------------------------
DL.StartCommunication
Sub DL_OnSend()
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Left(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Right(crcStr, 2)) ' high byte
    End If
End Sub

DL.AddComment vbCrLf
DL.AddComment "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""

'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'DL.pause 1000

'If 0 Then
'If result = 0 then
'  DL.AddComment Chr(13) & "Result = FAILED"
'Else
'  DL.AddComment Chr(13) & "Result = PASSED"
'End If
'End If

'If Prompting(0) = "ON" Then
'  If result = 0 then
'    MsgBox "Result = FAILED", VBOKOnly, "Result"
'  Else 
'    MsgBox "Result = PASSED", VBOKOnly, "Result"
'  End If
'End If

'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------

'If MasterResult = 1 Then
'	MasterVerdict = "PASSED"
'ElseIf MasterResult = 0 Then
'	MasterVerdict = "FAILED"
'End If
'result = MasterResult
'DL.AddComment vbCrLf
'DL.AddComment "MASTER RESULT = " & MasterVerdict

'------------------------------------------------------------
' WRITE FINAL VERDICT FILE(!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile
