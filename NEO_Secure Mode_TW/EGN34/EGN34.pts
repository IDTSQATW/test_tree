DL_SCRIPTVERSION
1
49529

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "EGN34" ' !!!!! EDIT THIS !!!!!
'Object: to verify cmd C7-2F/ C7-30
' 1) 04-F0 -> C7-30 (GRN-91)
' 2) C7-2F (00/ 01) -> C7-30
' 3) Had key -> C7-2F/ C7-30
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config2"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result

  'Set Reader Type
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerType = result

  'Set Reader Model
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerModel = result

  'Set Reader FW version
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwVersion = result

  'Set Reader FW build
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwBuild = result

  'Set Reader General Flag
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  genFlag = result
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
dim r(5)
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
countf = 0
result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub

Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function

sub loadkey()
If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Erase All Key (83-00)"
   DL.SendSequence "Erase All Key (83-00)"
   result = DL.WaitForSequence("83-00 ok resp", 1, 2000)
   dl.pause 300
   if result <> 0 then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Load KPK"
      DL.SendSequence "Load Plaintext Key - command 1 (80-00)"
      result = DL.WaitForSequence("80-xx ok resp", 1, 2000)
      dl.pause 300 
      if result <> 0 then
         dl.resetreceivecounter
         DL.SendSequence "Load Plaintext Key - command 2  (80-00)"
         result = DL.WaitForSequence("80-xx ok resp", 1, 2000)
         dl.pause 300 
         if result <> 0 then
            dl.resetreceivecounter
            DL.SendSequence "Load Encrypted KPK (80-01)"
            result = DL.WaitForSequence("80-xx ok resp", 1, 2000)
            dl.pause 300 
            if result <> 0 then
               dl.resetreceivecounter
               dl.addcomment vbcrlf
               DL.AddComment "--- Load DUKPT key"
               DL.SendSequence "Enter DUKPT Key (81-00)"
               result = DL.WaitForSequence("81-xx ok resp", 1, 2000)
               dl.pause 300 
            end if
         end if
      end if
   end if 
end if
end sub
'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function
'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------1) 04-F0 -> C7-30 (GRN-91) => NEOI test only
if readerType <> "NEO2" then
   If result <> 0 Then
      dl.addcomment "------------------------------------------------------------1) 04-F0 -> C7-30 (GRN-91)"
      dl.resetreceivecounter
      DL.AddComment "--- (04-F0 Erase flash)"
      DL.SendSequence "04-F0"
      result = DL.WaitForSequence("04-xx ok resp", 1, 5000)
      dl.pause 10000
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- C7-30 Get Data Encryption Key Variant Type"
      DL.SendSequence "C7-30 Get Data Encryption Key Variant Type"
      result = DL.WaitForSequence("C7-30 00", 1, 3000)
   End If
'------------------------------------------------------------2) C7-2F (00/ 01) -> C7-30 => NEOI test only
   if result <> 0 then
      dl.addcomment vbcrlf & "------------------------------------------------------------2) C7-2F (00/ 01) -> C7-30"
      for k = 1 to 4
          if k = 1 or k = 3 then a = "C7-2F Set Data Encryption Key Variant Type (00 Data Variant)"
          if k = 2 or k = 4 then a = "C7-2F Set Data Encryption Key Variant Type (01 PIN Variant)"

          If result <> 0 Then
             dl.resetreceivecounter
             dl.addcomment vbcrlf
             DL.AddComment "--- " & a
             DL.SendSequence a
             result = DL.WaitForSequence("C7-xx ok resp", 1, 3000)
         End If

          If result <> 0 Then
             dl.resetreceivecounter
             dl.addcomment vbcrlf
             DL.AddComment "--- C7-30 Get Data Encryption Key Variant Type"
             DL.SendSequence "C7-30 Get Data Encryption Key Variant Type"
             if k = 1 or k = 3 then result = DL.WaitForSequence("C7-30 00", 1, 3000)
             if k = 2 or k = 4 then result = DL.WaitForSequence("C7-30 01", 1, 3000)
         End If
      next
   end if
end if
'------------------------------------------------------------3) Had key -> C7-2F/ C7-30
if readerType <> "NEO2" then
   if result <> 0 then
      dl.addcomment vbcrlf & "------------------------------------------------------------3) Had key -> C7-2F/ C7-30"
      loadkey()
   end if
else
   keytype = inputbox("Which data key variant type do u want to test = ?" & vbcrlf & "1) Data" & vbcrlf & "2) Pin", vbyesno, "1")
   keycheck = msgbox ("Does reader load data key w/ correct key variant type?", vbyesno)
   if keycheck = 7 then result = 0
end if

if readerType <> "NEO2" or keycheck = 6 then
   if result <> 0 then
      for k = 1 to 2
          if k = 1 then a = "C7-2F Set Data Encryption Key Variant Type (00 Data Variant)"
          if k = 2 then a = "C7-2F Set Data Encryption Key Variant Type (01 PIN Variant)"
          if readerType = "NEO2" then k = 3

          if readerType <> "NEO2" then
             If result <> 0 Then
                dl.resetreceivecounter
                dl.addcomment vbcrlf
                DL.AddComment "--- " & a
                DL.SendSequence a
                result = DL.WaitForSequence("C7 05", 1, 3000)
             End If
          end if

          If result <> 0 Then
             dl.resetreceivecounter
             dl.addcomment vbcrlf
             DL.AddComment "--- C7-30 Get Data Encryption Key Variant Type"
             DL.SendSequence "C7-30 Get Data Encryption Key Variant Type"
             if readerType <> "NEO2" then 
                result = DL.WaitForSequence("C7-30 01", 1, 3000)
             else
                if keytype = 1 then result = DL.WaitForSequence("C7-30 00", 1, 3000)
                if keytype = 2 then result = DL.WaitForSequence("C7-30 01", 1, 3000)
             end if
             dl.pause 200
          End If
      next
   end if
else
   if keytype = 2 then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- C7-A2 (PIN variant)"
      DL.SendSequence "C7-A2 (PIN variant)"
      dl.pause 1000
   end if
   dl.addcomment vbcrlf & "*** NEO2 project please load data key first..."
end if
dl.addcomment vbcrlf & "------------------------------------------------------------" & vbcrlf & "Note: NEO2 project must switch Key Variant Type (Data or Pin) by manual and then repeat to run this case"
'------------------------------------------------------------
DL.AddComment vbcrlf & "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""

'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'DL.pause 1000

'If result = 0 then
'  DL.AddComment Chr(13) & "Result = FAILED"
'Else
'  DL.AddComment Chr(13) & "Result = PASSED"
'End If

'If Prompting(0) = "ON" Then
'  If result = 0 then
'    MsgBox "Result = FAILED", VBOKOnly, "Result"
'  Else 
'    MsgBox "Result = PASSED", VBOKOnly, "Result"
'  End If
'End If
'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------
'If MasterResult = 1 Then
'      MasterVerdict = "PASSED"
'ElseIf MasterResult = 0 Then
'      MasterVerdict = "FAILED"
'End If
'result = MasterResult
'DL.AddComment vbCrLf
'DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 

Sub DL_OnSend()
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Right(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Left(crcStr, 2)) ' high byte
    End If
End Sub
