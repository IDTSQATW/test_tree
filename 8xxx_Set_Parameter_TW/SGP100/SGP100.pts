DL_SCRIPTVERSION
1
27834

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "SGP100" ' !!!!! EDIT THIS !!!!!
' Objective: for JIRA#CS-3264, modify tag DFED11
' spec refer to ver. NEO IDG_Rev 157.6
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config2"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result

  'Set Reader Type
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerType = result

  'Set Reader Model
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerModel = result

  'Set Reader FW version
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwVersion = result

  'Set Reader FW build
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwBuild = result

  'Set Reader General Flag
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  genFlag = result
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
'DL.StartCommunication
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
result = 1
countf = 0
dim r(28)
enc = 0
readercheck = 7

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX = 1 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub

Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function

sub precondition()
    dl.resetreceivecounter
    dl.addcomment "Erase All Keys..."
    dl.sendsequence "Erase All Keys"
    result = dl.waitforsequence("erase key ok", 1, 2000)
    dl.pause 500
end sub

sub loadkey_D()
    dl.addcomment vbcrlf
    dl.addcomment "Loading DUKPT key..."
       dl.resetreceivecounter
       dl.sendsequence "Load Plaintext KPK Component (the 1st)"
       result = dl.waitforsequence("load kpk ok", 1, 2000)
       dl.pause 500
       if result <> 0 then
          dl.resetreceivecounter
          dl.sendsequence "Load Plaintext KPK Component (the last)"
          result = dl.waitforsequence("load kpk ok", 1, 2000)
          dl.pause 500
          if result <> 0 then
             dl.resetreceivecounter
             dl.sendsequence "Load KPK"
             result = dl.waitforsequence("load kpk ok", 1, 2000)
             dl.pause 500
             if result <> 0 then
                dl.resetreceivecounter
                dl.sendsequence "Load DUKPT key (key index 5)"
                result = dl.waitforsequence("dukpt ok", 1, 2000)
                dl.pause 500
                if result <> 0 then
                   dl.addcomment vbcrlf & "OK!"
                else
                   dl.addcomment vbcrlf & "Load DUKPT key (key index 5): FAIL!"
                end if
             else
                dl.addcomment vbcrlf & "Load KPK: FAIL!"
             end if
          else
             dl.addcomment vbcrlf & "Load Plaintext KPK Component (the last): FAIL!"
          end if
       else
          dl.addcomment vbcrlf & "Load Plaintext KPK Component (the 1st): FAIL!"
       end if 
end sub

sub countfail()
    for j = 1 to 28
        if r(j) = 1 then
           countf = countf + 1
        end if
    next
end sub
'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function

'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
if readerType <> "NEO2" then
   precondition()
   if result <> 0 then
      loadkey_D()
   end if
else
   keycheck = msgbox ("Reader had data key?", vbyesno)
   if keycheck = 6 then result = 1
   if keycheck = 7 then
      result = 0
      DL.AddComment "This is NEOII project, please load data key first..."
   end if
end if

If result <> 0 Then
   readercheck = msgbox("This is SRED reader?", vbyesno)
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Get Data Encryption (C7-37)"
   DL.SendSequence "Get Data Encryption (C7-37)"
   if readercheck = 6 then result = DL.WaitForSequence("C7-37 resp 03", 1, 2000)
   if readercheck = 7 then result = DL.WaitForSequence("C7-37 resp 00", 1, 2000)
   dl.pause 500
   if result = 0 and readercheck = 6 then dl.addcomment vbcrlf & "cmd C7-37 should get value 03..."
   if result = 0 and readercheck = 7 then dl.addcomment vbcrlf & "Please disable data encryption first...(C7-37 = 00)"
   if result = 0 then countf = countf + 1
End If
'------------------------------------------------------------
sub oldtagcheck()
    if result <> 0 then
       r(1) = dl.waitforsequence("FFF0" & i, 1, 200)
            if r(1) = 1 then dl.addcomment vbcrlf & "FFF0...FAIL!"
       r(2) = dl.waitforsequence("FFF1" & i, 1, 200)
            if r(2) = 1 then dl.addcomment vbcrlf & "FFF1...FAIL!"
       r(3) = dl.waitforsequence("FFF2" & i, 1, 200)
            if r(3) = 1 then dl.addcomment vbcrlf & "FFF2...FAIL!"
       r(4) = dl.waitforsequence("FFF3" & i, 1, 200)
            if r(4) = 1 then dl.addcomment vbcrlf & "FFF3...FAIL!"
       r(5) = dl.waitforsequence("FFF4" & i, 1, 200)
            if r(5) = 1 then dl.addcomment vbcrlf & "FFF4...FAIL!"
       r(6) = dl.waitforsequence("FFF5" & i, 1, 200)
            if r(6) = 1 then dl.addcomment vbcrlf & "FFF5...FAIL!"
       r(7) = dl.waitforsequence("FFF7" & i, 1, 200)
            if r(7) = 1 then dl.addcomment vbcrlf & "FFF7...FAIL!"
       r(8) = dl.waitforsequence("FFF8" & i, 1, 200)
            if r(8) = 1 then dl.addcomment vbcrlf & "FFF8...FAIL!"
       r(9) = dl.waitforsequence("FFF9" & i, 1, 200)
            if r(9) = 1 then dl.addcomment vbcrlf & "FFF9...FAIL!"
       r(10) = dl.waitforsequence("FFFA" & i, 1, 200)
            if r(10) = 1 then dl.addcomment vbcrlf & "FFFA...FAIL!"
       r(11) = dl.waitforsequence("FFFB" & i, 1, 200)
            if r(11) = 1 then dl.addcomment vbcrlf & "FFFB...FAIL!"
       r(12) = dl.waitforsequence("FFFD" & i, 1, 200)
            if r(12) = 1 then dl.addcomment vbcrlf & "FFFD ...FAIL!"
       r(13) = dl.waitforsequence("FFFE" & i, 1, 200)
            if r(13) = 1 then dl.addcomment vbcrlf & "FFFE...FAIL!"
       r(14) = dl.waitforsequence("FFFF" & i, 1, 200)
            if r(14) = 1 then dl.addcomment vbcrlf & "FFFF...FAIL!"
       r(15) = dl.waitforsequence("FFE0" & i, 1, 200)
            if r(15) = 1 then dl.addcomment vbcrlf & "FFE0...FAIL!"
       r(16) = dl.waitforsequence("FFE1" & i, 1, 200)
            if r(16) = 1 then dl.addcomment vbcrlf & "FFE1...FAIL!"
       r(17) = dl.waitforsequence("FFE2" & i, 1, 200)
            if r(17) = 1 then dl.addcomment vbcrlf & "FFE2...FAIL!"
       r(18) = dl.waitforsequence("FFE3" & i, 1, 200)
            if r(18) = 1 then dl.addcomment vbcrlf & "FFE3...FAIL!"
       r(19) = dl.waitforsequence("FFE4" & i, 1, 200)
            if r(19) = 1 then dl.addcomment vbcrlf & "FFE4...FAIL!"
       r(20) = dl.waitforsequence("FFE5" & i, 1, 200)
            if r(20) = 1 then dl.addcomment vbcrlf & "FFE5...FAIL!"
       r(21) = dl.waitforsequence("FFE6" & i, 1, 200)
            if r(21) = 1 then dl.addcomment vbcrlf & "FFE6...FAIL!"
       r(22) = dl.waitforsequence("FFE8" & i, 1, 200)
            if r(22) = 1 then dl.addcomment vbcrlf & "FFE8...FAIL!"
       r(23) = dl.waitforsequence("FFE9" & i, 1, 200)
            if r(23) = 1 then dl.addcomment vbcrlf & "FFE9...FAIL!"
       r(24) = dl.waitforsequence("FFEA" & i, 1, 200)
            if r(24) = 1 then dl.addcomment vbcrlf & "FFEA...FAIL!"
       r(25) = dl.waitforsequence("FFEE13" & i, 1, 200)
            if r(25) = 1 then dl.addcomment vbcrlf & "FFEE13...FAIL!"
       r(26) = dl.waitforsequence("FFEE14" & i, 1, 200)
            if r(26) = 1 then dl.addcomment vbcrlf & "FFEE14...FAIL!"
       r(27) = dl.waitforsequence("FFEE1F" & i, 1, 200)
            if r(27) = 1 then dl.addcomment vbcrlf & "FFEE1F...FAIL!"
       r(28) = dl.waitforsequence("FFEE12" & i, 1, 200)
            if r(28) = 1 then dl.addcomment vbcrlf & "FFEE12...FAIL!"

      countfail()
    end if
end sub

sub newtagcheck()
    if result <> 0 then
       r(1) = dl.waitforsequence("DFEE67" & i, 1, 200)
            if r(1) = 1 then dl.addcomment vbcrlf & "DFEE67...FAIL!"
       r(2) = dl.waitforsequence("DFEE34" & i, 1, 200)
            if r(2) = 1 then dl.addcomment vbcrlf & "DFEE34...FAIL!"
       r(3) = dl.waitforsequence("9F1E" & i, 1, 200)
            if r(3) = 1 then dl.addcomment vbcrlf & "9F1E...FAIL!"
       r(4) = dl.waitforsequence("DFEE44" & i, 1, 200)
            if r(4) = 1 then dl.addcomment vbcrlf & "DFEE44...FAIL!"
       r(5) = dl.waitforsequence("DFEE35" & i, 1, 200)
            if r(5) = 1 then dl.addcomment vbcrlf & "DFEE35...FAIL!"
       r(6) = dl.waitforsequence("DF8126" & i, 1, 200)
            if r(6) = 1 then dl.addcomment vbcrlf & "DF8126...FAIL!"
       r(7) = dl.waitforsequence("DFEE7E" & i, 1, 200)
            if r(7) = 1 then dl.addcomment vbcrlf & "DFEE7E...FAIL!"
       r(8) = dl.waitforsequence("DFEE37" & i, 1, 200)
            if r(8) = 1 then dl.addcomment vbcrlf & "DFEE37...FAIL!"
       r(9) = dl.waitforsequence("DFEE1C" & i, 1, 200)
            if r(9) = 1 then dl.addcomment vbcrlf & "DFEE1C...FAIL!"
       r(10) = dl.waitforsequence("DFEF29" & i, 1, 200)
            if r(10) = 1 then dl.addcomment vbcrlf & "DFEF29...FAIL!"
       r(11) = dl.waitforsequence("DFEE38" & i, 1, 200)
            if r(11) = 1 then dl.addcomment vbcrlf & "DFEE38...FAIL!"
       r(12) = dl.waitforsequence("DF8122" & i, 1, 200)
            if r(12) = 1 then dl.addcomment vbcrlf & "DF8122...FAIL!"
       r(13) = dl.waitforsequence("DF8120" & i, 1, 200)
            if r(13) = 1 then dl.addcomment vbcrlf & "DF8120...FAIL!"
       r(14) = dl.waitforsequence("DF8121" & i, 1, 200)
            if r(14) = 1 then dl.addcomment vbcrlf & "DF8121...FAIL!"
       r(15) = dl.waitforsequence("DFEE4A" & i, 1, 200)
            if r(15) = 1 then dl.addcomment vbcrlf & "DFEE4A...FAIL!"
       r(16) = dl.waitforsequence("DFEE4B" & i, 1, 200)
            if r(16) = 1 then dl.addcomment vbcrlf & "DFEE4B...FAIL!"
       r(17) = dl.waitforsequence("DFEE4C" & i, 1, 200)
            if r(17) = 1 then dl.addcomment vbcrlf & "DFEE4C...FAIL!"
       r(18) = dl.waitforsequence("DFEE4D" & i, 1, 200)
            if r(18) = 1 then dl.addcomment vbcrlf & "DFEE4D...FAIL!"
       r(19) = dl.waitforsequence("DFEE2D" & i, 1, 200)
            if r(19) = 1 then dl.addcomment vbcrlf & "DFEE2D...FAIL!"
       r(20) = dl.waitforsequence("DFEE2E" & i, 1, 200)
            if r(20) = 1 then dl.addcomment vbcrlf & "DFEE2E...FAIL!"
       r(21) = dl.waitforsequence("DFEE2F" & i, 1, 200)
            if r(21) = 1 then dl.addcomment vbcrlf & "DFEE2F...FAIL!"
       r(22) = dl.waitforsequence("DFEE53" & i, 1, 200)
            if r(22) = 1 then dl.addcomment vbcrlf & "DFEE53...FAIL!"
       r(23) = dl.waitforsequence("DFEE54" & i, 1, 200)
            if r(23) = 1 then dl.addcomment vbcrlf & "DFEE54...FAIL!"
       r(24) = dl.waitforsequence("DFEE59" & i, 1, 200)
            if r(24) = 1 then dl.addcomment vbcrlf & "DFEE59...FAIL!"
       r(25) = dl.waitforsequence("DFEF17" & i, 1, 200)
            if r(25) = 1 then dl.addcomment vbcrlf & "DFEF17...FAIL!"
       r(26) = dl.waitforsequence("DFEF18" & i, 1, 200)
            if r(26) = 1 then dl.addcomment vbcrlf & "DFEF18...FAIL!"
       r(27) = dl.waitforsequence("DFEE02" & i, 1, 200)
            if r(27) = 1 then dl.addcomment vbcrlf & "DFEE02...FAIL!"
       r(28) = dl.waitforsequence("DFEE12" & i, 1, 200)
            if r(28) = 1 then dl.addcomment vbcrlf & "DFEE12...FAIL!"

      countfail()
    end if
end sub

sub maintest()
'------------------------------------------------------------new 3-byte tags
If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Set new 3-byte tags   " & readerType 
   if readerType <> "NEO2" then DL.SendSequence "DFED11 = 00 = new 3-byte tags"
   if readerType = "NEO2" then DL.SendSequence "DFEF3D = 00 = new 3-byte tags (NEO2)"
   result = DL.WaitForSequence("04 00", 1, 5000)
End If

if result <> 0 then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 03-02"
   DL.SendSequence "03-02"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   oldtagcheck()
end if

if readercheck = 7 and enc = 0 then
if result <> 0 then
   msgbox "Click OK --> Tap any CL card", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-01 == CL test"
   DL.SendSequence "02-01"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   oldtagcheck()
end if

if result <> 0 then
   msgbox "Click OK --> Swipe any MSR card", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-01 == MSR test"
   DL.SendSequence "02-01"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   oldtagcheck()
end if
end if

if result <> 0 then
   msgbox "Click OK --> Tap any CL card", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-40 == CL test"
   DL.SendSequence "02-40"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   oldtagcheck()
end if

if result <> 0 then
   msgbox "Click OK --> Swipe any MSR card", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-40 == MSR test"
   DL.SendSequence "02-40"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   oldtagcheck()
end if

if result <> 0 then
   msgbox "Click OK --> Tap CL card (EMV Test Card V2 T=0)", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-40 == CL test (reject)"
   DL.SendSequence "02-40"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   oldtagcheck()
end if

if result <> 0 then
   msgbox "Click OK --> Insert CT card (EMV Test Card V2 T=0)", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-10 == CT test"
   DL.SendSequence "60-10"
   dl.pause 3000
   dl.addcomment vbcrlf & "Waiting..."
   oldtagcheck()

   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-11"
   DL.SendSequence "60-11"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   oldtagcheck()

   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-12"
   DL.SendSequence "60-12"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   oldtagcheck()
   msgbox "Remove card --> Click OK", vbokonly
end if

if result <> 0 then
   msgbox "Click OK --> Swipe MSR card (service code is not 2xx or 6xx)", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-10 == MSR test"
   DL.SendSequence "60-10"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   oldtagcheck()
end if
'------------------------------------------------------------old 2-bute tags
If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Set old 2-byte tags"
   if readerType <> "NEO2" then DL.SendSequence "DFED11 = 01 = old 2-byte tags"
   if readerType = "NEO2" then DL.SendSequence "DFEF3D = 01 = old 2-byte tags (NEO2)"
   result = DL.WaitForSequence("04 00", 1, 5000)
End If

if result <> 0 then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 03-02"
   DL.SendSequence "03-02"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   newtagcheck()
end if

if readercheck = 7 and enc = 0 then
if result <> 0 then
   msgbox "Click OK --> Tap any CL card", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-01 == CL test"
   DL.SendSequence "02-01"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   newtagcheck()
end if

if result <> 0 then
   msgbox "Click OK --> Swipe any MSR card", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-01 == MSR test"
   DL.SendSequence "02-01"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   newtagcheck()
end if
end if

if result <> 0 then
   msgbox "Click OK --> Tap any CL card", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-40 == CL test"
   DL.SendSequence "02-40"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   newtagcheck()
end if

if result <> 0 then
   msgbox "Click OK --> Swipe any MSR card", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-40 == MSR test"
   DL.SendSequence "02-40"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   newtagcheck()
end if

if result <> 0 then
   msgbox "Click OK --> Tap CL card (EMV Test Card V2 T=0)", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 02-40 == CL test (reject)"
   DL.SendSequence "02-40"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   newtagcheck()
end if

if result <> 0 then
   msgbox "Click OK --> Insert CT card (EMV Test Card V2 T=0)", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-10 == CT test"
   DL.SendSequence "60-10"
   dl.pause 3000
   dl.addcomment vbcrlf & "Waiting..."
   newtagcheck()

   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-11"
   DL.SendSequence "60-11"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   newtagcheck()

   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-12"
   DL.SendSequence "60-12"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   newtagcheck()
   msgbox "Remove card --> Click OK", vbokonly
end if

if result <> 0 then
   msgbox "Click OK --> Swipe MSR card (service code is not 2xx or 6xx)", vbokonly
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- 60-10 == MSR test"
   DL.SendSequence "60-10"
   dl.pause 2000
   dl.addcomment vbcrlf & "Waiting..."
   newtagcheck()
end if
end sub
'------------------------------------------------------------
maintest()

if readercheck = 7 then
if result <> 0 then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- C7-36 -- 03"
   DL.SendSequence "C7-36 -- 03"
   result = DL.WaitForSequence("C7 00", 1, 5000)
   enc = 1

   maintest()
end if
end if

if countf <> 0 then
   result = 0
   dl.addcomment vbcrlf
   dl.addcomment "=============="
   dl.addcomment "FAIL items: " & countf
   dl.addcomment "=============="
else
   result = 1
end if
'------------------------------------------------------------
DL.Pause 500
DL.AddComment vbCrLf

DL.AddComment "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)

Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""
'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'DL.pause 1000
'If 0 Then
'If result = 0 then
'  DL.AddComment Chr(13) & "Result = FAILED"
'Else
'  DL.AddComment Chr(13) & "Result = PASSED"
'End If
'End If

'If Prompting(0) = "ON" Then
'  If result = 0 then
'    MsgBox "Result = FAILED", VBOKOnly, "Result"
'  Else 
'    MsgBox "Result = PASSED", VBOKOnly, "Result"
'  End If
'End If
'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------
If MasterResult = 1 Then
      MasterVerdict = "PASSED"
ElseIf MasterResult = 0 Then
      MasterVerdict = "FAILED"
End If
result = MasterResult
DL.AddComment vbCrLf
DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 

Sub DL_OnSend()
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Right(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Left(crcStr, 2)) ' high byte
    End If
End Sub
