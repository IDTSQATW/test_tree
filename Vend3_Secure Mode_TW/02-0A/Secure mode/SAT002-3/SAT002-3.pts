DL_SCRIPTVERSION
1
34409

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "SAT002-3" ' !!!!! EDIT THIS !!!!!
' Objective: verify transaction cmd 02-0A (event mode) can work if tap MChip card
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result
      
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
DL.StartCommunication
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
dim key
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
countf = 0
dim r(37)

result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON " Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub


Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function

sub countfail()
    for i = 0 to 37
        if r(i) = 0 then
           countf = countf + 1
        end if
    next
end sub
sub loadkey_D()
    dl.resetreceivecounter
    'dl.addcomment vbcrlf
    dl.addcomment "Loading DUKPT key..."
    dl.sendsequence "Erase All Keys"
    result = dl.waitforsequence("erase key ok", 1, 2000)
    dl.pause 500
    if result <> 0 then
       dl.resetreceivecounter
       dl.sendsequence "Load Plaintext KPK Component (the 1st)"
       result = dl.waitforsequence("load kpk ok", 1, 2000)
       dl.pause 500
       if result <> 0 then
          dl.resetreceivecounter
          dl.sendsequence "Load Plaintext KPK Component (the last)"
          result = dl.waitforsequence("load kpk ok", 1, 2000)
          dl.pause 500
          if result <> 0 then
             dl.resetreceivecounter
             dl.sendsequence "Load KPK"
             result = dl.waitforsequence("load kpk ok", 1, 2000)
             dl.pause 500
             if result <> 0 then
                dl.resetreceivecounter
                dl.sendsequence "Load DUKPT key (key index 5)"
                result = dl.waitforsequence("dukpt ok", 1, 2000)
                dl.pause 500
                if result <> 0 then
                   'dl.resetreceivecounter
                   'dl.sendsequence "Select DUKPT Data Encryption Key (key slot 5)"
                   'result = dl.waitforsequence("dukpt ok", 1, 2000)
                   'dl.pause 500
                   'if result = 0 then
                   '   dl.addcomment vbcrlf & "Select DUKPT Data Encryption Key (key slot 5): FAIL!"
                   'else 
                      dl.addcomment vbcrlf & "OK!"
                   'end if
                else
                   dl.addcomment vbcrlf & "Load DUKPT key (key index 5): FAIL!"
                end if
             else
                dl.addcomment vbcrlf & "Load KPK: FAIL!"
             end if
          else
             dl.addcomment vbcrlf & "Load Plaintext KPK Component (the last): FAIL!"
          end if
       else
          dl.addcomment vbcrlf & "Load Plaintext KPK Component (the 1st): FAIL!"
       end if 
    else
       dl.addcomment vbcrlf & "Erase All Keys: FAIL!"
    end if    
end sub

sub loadkey_M()
    dl.resetreceivecounter
    dl.addcomment vbcrlf
    dl.addcomment "Loading Master key..."
    dl.sendsequence "Load Master key (key slot 5)"
    result = dl.waitforsequence("load kpk ok", 1, 2000)
    dl.pause 41000
    if result <> 0 then
       'dl.resetreceivecounter
       'dl.sendsequence "Set Master Data Encryption Key (key slot 5)"
       'result = dl.waitforsequence("load kpk ok", 1, 2000)
       'dl.pause 500
       'if result = 0 then
       '   dl.addcomment vbcrlf & "Set Master Data Encryption Key (key slot 5): FAIL!"
       'else 
          dl.addcomment vbcrlf & "OK!"
       'end if
    else
       dl.addcomment vbcrlf & "Load Master key (key slot 5): FAIL!"
    end if
end sub

sub loadkey_S()
    dl.resetreceivecounter
    dl.addcomment vbcrlf
    dl.addcomment "Loading Session key..."
    dl.sendsequence "Load secure session key"
    result = dl.waitforsequence("load kpk ok", 1, 2000)
    if result = 0 then
       dl.addcomment vbcrlf & "Load secure session key: FAIL!"
    else 
       dl.addcomment vbcrlf & "OK!"
    end if
end sub
'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function

'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
sub getresult()

If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Get Input Event"
   DL.SendSequence " Get Input Event"
   result = DL.WaitForSequence("Input Response", 1, 10000)
else 
   countf = countf + 1
End If

If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   if key = "dukpt" then
      DL.AddComment "--- Get Transaction Result"
      DL.SendSequence " Get Transaction Result (03-00)"
      result = DL.WaitForSequence("02-0A resp dukpt", 1, 10000)
      dl.pause 500
      if result <> 0 then
         r(37) = dl.waitforsequence("Tag DFEE12", 1, 1000)
              if r(37) = 0 then dl.addcomment vbcrlf & "Tag DFEE12...FAIL!"
         tk = dl.waitforsequence("Tag FFEE12", 1, 2000)
              if tk = 1 then 
                 r(0) = 0       
                 dl.addcomment vbcrlf & "Tag FFEE12...FAIL!"
              else
                 r(0) = 1
              end if
         r(1) = dl.waitforsequence("Tag 5A mask", 1, 1000)
              if r(1) = 0 then dl.addcomment vbcrlf & "Tag 5A mask...FAIL!"
         r(2) = dl.waitforsequence("Tag 9F06", 1, 1000)
              if r(2) = 0 then dl.addcomment vbcrlf & "Tag 9F06...FAIL!"
         r(3) = dl.waitforsequence("Tag DF8129", 1, 1000)
              if r(3) = 0 then dl.addcomment vbcrlf & "Tag DF8129...FAIL!"
         r(4) = dl.waitforsequence("Tag DF76", 1, 1000)
              if r(4) = 0 then dl.addcomment vbcrlf & "Tag DF76...FAIL!"
         r(5) = dl.waitforsequence("Tag FF8106", 1, 1000)
              if r(5) = 0 then dl.addcomment vbcrlf & "Tag FF8106...FAIL!"
         r(6) = dl.waitforsequence("Tag 9F42", 1, 1000)
              if r(6) = 0 then dl.addcomment vbcrlf & "Tag 9F42...FAIL!"
         r(7) = dl.waitforsequence("Tag DF8115", 1, 1000)
              if r(7) = 0 then dl.addcomment vbcrlf & "Tag DF8115...FAIL!"
         r(8) = dl.waitforsequence("Tag 9F6E", 1, 1000)
              if r(8) = 0 then dl.addcomment vbcrlf & "Tag 9F6E...FAIL!"
         r(9) = dl.waitforsequence("Tag FF8105", 1, 1000)
              if r(9) = 0 then dl.addcomment vbcrlf & "Tag FF8105...FAIL!"
         r(10) = dl.waitforsequence("Tag 9F02", 1, 1000)
              if r(10) = 0 then dl.addcomment vbcrlf & "Tag 9F02...FAIL!"
         r(11) = dl.waitforsequence("Tag 9F03", 1, 1000)
              if r(11) = 0 then dl.addcomment vbcrlf & "Tag 9F03...FAIL!"
         r(12) = dl.waitforsequence("Tag 9F26", 1, 1000)
              if r(12) = 0 then dl.addcomment vbcrlf & "Tag 9F26...FAIL!"
         r(13) = dl.waitforsequence("Tag 5F24", 1, 1000)
              if r(13) = 0 then dl.addcomment vbcrlf & "Tag 5F24...FAIL!"
         r(14) = dl.waitforsequence("Tag 82", 1, 1000)
              if r(14) = 0 then dl.addcomment vbcrlf & "Tag 82...FAIL!"
         r(15) = dl.waitforsequence("Tag 50", 1, 1000)
              if r(15) = 0 then dl.addcomment vbcrlf & "Tag 50...FAIL!"
         r(16) = dl.waitforsequence("Tag 5A - Enc dukpt", 1, 1000)
              if r(16) = 0 then dl.addcomment vbcrlf & "Tag 5A...FAIL!"
         r(17) = dl.waitforsequence("Tag 5F34", 1, 1000)
              if r(17) = 0 then dl.addcomment vbcrlf & "Tag 5F34...FAIL!"
         r(18) = dl.waitforsequence("Tag 9F12", 1, 1000)
              if r(18) = 0 then dl.addcomment vbcrlf & "Tag 9F12...FAIL!"
         r(19) = dl.waitforsequence("Tag 9F36", 1, 1000)
              if r(19) = 0 then dl.addcomment vbcrlf & "Tag 9F36...FAIL!"
         r(20) = dl.waitforsequence("Tag 9F09", 1, 1000)
              if r(20) = 0 then dl.addcomment vbcrlf & "Tag 9F09...FAIL!"
         r(21) = dl.waitforsequence("Tag 84", 1, 1000)
              if r(21) = 0 then dl.addcomment vbcrlf & "Tag 84...FAIL!"
         r(22) = dl.waitforsequence("Tag 9F1E", 1, 1000)
              if r(22) = 0 then dl.addcomment vbcrlf & "Tag 9F1E...FAIL!"
         r(23) = dl.waitforsequence("Tag 9F11", 1, 1000)
              if r(23) = 0 then dl.addcomment vbcrlf & "Tag 9F11...FAIL!"
         r(24) = dl.waitforsequence("Tag 9F27", 1, 1000)
              if r(24) = 0 then dl.addcomment vbcrlf & "Tag 9F27...FAIL!"
         r(25) = dl.waitforsequence("Tag 9F34", 1, 1000)
              if r(25) = 0 then dl.addcomment vbcrlf & "Tag 9F34...FAIL!"
         r(26) = dl.waitforsequence("Tag 9F10", 1, 1000)
              if r(26) = 0 then dl.addcomment vbcrlf & "Tag 9F10...FAIL!"
         r(27) = dl.waitforsequence("Tag 9F33", 1, 1000)
              if r(27) = 0 then dl.addcomment vbcrlf & "Tag 9F33...FAIL!"
         r(28) = dl.waitforsequence("Tag 9F1A", 1, 1000)
              if r(28) = 0 then dl.addcomment vbcrlf & "Tag 9F1A...FAIL!"
         r(29) = dl.waitforsequence("Tag 9F35", 1, 1000)
              if r(29) = 0 then dl.addcomment vbcrlf & "Tag 9F35...FAIL!"
         r(30) = dl.waitforsequence("Tag 95", 1, 1000)
              if r(30) = 0 then dl.addcomment vbcrlf & "Tag 95...FAIL!"
         r(31) = dl.waitforsequence("Tag 57 - Enc dukpt", 1, 1000)
              if r(31) = 0 then dl.addcomment vbcrlf & "Tag 57...FAIL!"
         r(32) = dl.waitforsequence("Tag 9F53", 1, 1000)
              if r(32) = 0 then dl.addcomment vbcrlf & "Tag 9F53...FAIL!"
         r(33) = dl.waitforsequence("Tag 5F2A", 1, 1000)
              if r(33) = 0 then dl.addcomment vbcrlf & "Tag 5F2A...FAIL!"
         r(34) = dl.waitforsequence("Tag 9A", 1, 1000)
              if r(34) = 0 then dl.addcomment vbcrlf & "Tag 9A...FAIL!"
         r(35) = dl.waitforsequence("Tag 9C", 1, 1000)
              if r(35) = 0 then dl.addcomment vbcrlf & "Tag 9C...FAIL!"
         r(36) = dl.waitforsequence("Tag 9F37", 1, 1000)
              if r(36) = 0 then dl.addcomment vbcrlf & "Tag 9F37...FAIL!"

         countfail()
      else 
         countf = countf + 1
      end if
      dl.pause 500
   elseif key = "ms" then
          DL.AddComment "--- Get Transaction Result"
          DL.SendSequence " Get Transaction Result (03-00)"
          result = DL.WaitForSequence("02-0A resp ms key", 1, 10000)
          dl.pause 500
          if result <> 0 then
             tkc = dl.waitforsequence("Tag DFEE12", 1, 1000)
                   if tkc = 1 then
                      r(37) = 0 
                      dl.addcomment vbcrlf & "Tag DFEE12...FAIL!"
                   else
                      r(37) = 1
                   end if
             tk = dl.waitforsequence("Tag FFEE12", 1, 2000)
                  if tk = 1 then 
                     r(0) = 0       
                     dl.addcomment vbcrlf & "Tag FFEE12...FAIL!"
                  else
                     r(0) = 1
                  end if  
             r(1) = dl.waitforsequence("Tag 5A mask", 1, 1000)
                  if r(1) = 0 then dl.addcomment vbcrlf & "Tag 5A mask...FAIL!"
             r(2) = dl.waitforsequence("Tag 9F06", 1, 1000)
                  if r(2) = 0 then dl.addcomment vbcrlf & "Tag 9F06...FAIL!"
             r(3) = dl.waitforsequence("Tag DF8129", 1, 1000)
                  if r(3) = 0 then dl.addcomment vbcrlf & "Tag DF8129...FAIL!"
             r(4) = dl.waitforsequence("Tag DF76", 1, 1000)
                  if r(4) = 0 then dl.addcomment vbcrlf & "Tag DF76...FAIL!"
             r(5) = dl.waitforsequence("Tag FF8106", 1, 1000)
                  if r(5) = 0 then dl.addcomment vbcrlf & "Tag FF8106...FAIL!"
             r(6) = dl.waitforsequence("Tag 9F42", 1, 1000)
                  if r(6) = 0 then dl.addcomment vbcrlf & "Tag 9F42...FAIL!"
             r(7) = dl.waitforsequence("Tag DF8115", 1, 1000)
                  if r(7) = 0 then dl.addcomment vbcrlf & "Tag DF8115...FAIL!"
             r(8) = dl.waitforsequence("Tag 9F6E", 1, 1000)
                  if r(8) = 0 then dl.addcomment vbcrlf & "Tag 9F6E...FAIL!"
             r(9) = dl.waitforsequence("Tag FF8105", 1, 1000)
                  if r(9) = 0 then dl.addcomment vbcrlf & "Tag FF8105...FAIL!"
             r(10) = dl.waitforsequence("Tag 9F02", 1, 1000)
                  if r(10) = 0 then dl.addcomment vbcrlf & "Tag 9F02...FAIL!"
             r(11) = dl.waitforsequence("Tag 9F03", 1, 1000)
                  if r(11) = 0 then dl.addcomment vbcrlf & "Tag 9F03...FAIL!"
             r(12) = dl.waitforsequence("Tag 9F26", 1, 1000)
                  if r(12) = 0 then dl.addcomment vbcrlf & "Tag 9F26...FAIL!"
             r(13) = dl.waitforsequence("Tag 5F24", 1, 1000)
                  if r(13) = 0 then dl.addcomment vbcrlf & "Tag 5F24...FAIL!"
             r(14) = dl.waitforsequence("Tag 82", 1, 1000)
                  if r(14) = 0 then dl.addcomment vbcrlf & "Tag 82...FAIL!"
             r(15) = dl.waitforsequence("Tag 50", 1, 1000)
                  if r(15) = 0 then dl.addcomment vbcrlf & "Tag 50...FAIL!"
             r(16) = dl.waitforsequence("Tag 5A - Enc ms", 1, 1000)
                  if r(16) = 0 then dl.addcomment vbcrlf & "Tag 5A...FAIL!"
             r(17) = dl.waitforsequence("Tag 5F34", 1, 1000)
                  if r(17) = 0 then dl.addcomment vbcrlf & "Tag 5F34...FAIL!"
             r(18) = dl.waitforsequence("Tag 9F12", 1, 1000)
                  if r(18) = 0 then dl.addcomment vbcrlf & "Tag 9F12...FAIL!"
             r(19) = dl.waitforsequence("Tag 9F36", 1, 1000)
                  if r(19) = 0 then dl.addcomment vbcrlf & "Tag 9F36...FAIL!"
             r(20) = dl.waitforsequence("Tag 9F09", 1, 1000)
                  if r(20) = 0 then dl.addcomment vbcrlf & "Tag 9F09...FAIL!"
             r(21) = dl.waitforsequence("Tag 84", 1, 1000)
                  if r(21) = 0 then dl.addcomment vbcrlf & "Tag 84...FAIL!"
             r(22) = dl.waitforsequence("Tag 9F1E", 1, 1000)
                  if r(22) = 0 then dl.addcomment vbcrlf & "Tag 9F1E...FAIL!"
             r(23) = dl.waitforsequence("Tag 9F11", 1, 1000)
                  if r(23) = 0 then dl.addcomment vbcrlf & "Tag 9F11...FAIL!"
             r(24) = dl.waitforsequence("Tag 9F27", 1, 1000)
                  if r(24) = 0 then dl.addcomment vbcrlf & "Tag 9F27...FAIL!"
             r(25) = dl.waitforsequence("Tag 9F34", 1, 1000)
                  if r(25) = 0 then dl.addcomment vbcrlf & "Tag 9F34...FAIL!"
             r(26) = dl.waitforsequence("Tag 9F10", 1, 1000)
                  if r(26) = 0 then dl.addcomment vbcrlf & "Tag 9F10...FAIL!"
             r(27) = dl.waitforsequence("Tag 9F33", 1, 1000)
                  if r(27) = 0 then dl.addcomment vbcrlf & "Tag 9F33...FAIL!"
             r(28) = dl.waitforsequence("Tag 9F1A", 1, 1000)
                  if r(28) = 0 then dl.addcomment vbcrlf & "Tag 9F1A...FAIL!"
             r(29) = dl.waitforsequence("Tag 9F35", 1, 1000)
                  if r(29) = 0 then dl.addcomment vbcrlf & "Tag 9F35...FAIL!"
             r(30) = dl.waitforsequence("Tag 95", 1, 1000)
                  if r(30) = 0 then dl.addcomment vbcrlf & "Tag 95...FAIL!"
             r(31) = dl.waitforsequence("Tag 57 - Enc ms", 1, 1000)
                  if r(31) = 0 then dl.addcomment vbcrlf & "Tag 57...FAIL!"
             r(32) = dl.waitforsequence("Tag 9F53", 1, 1000)
                  if r(32) = 0 then dl.addcomment vbcrlf & "Tag 9F53...FAIL!"
             r(33) = dl.waitforsequence("Tag 5F2A", 1, 1000)
                  if r(33) = 0 then dl.addcomment vbcrlf & "Tag 5F2A...FAIL!"
             r(34) = dl.waitforsequence("Tag 9A", 1, 1000)
                  if r(34) = 0 then dl.addcomment vbcrlf & "Tag 9A...FAIL!"
             r(35) = dl.waitforsequence("Tag 9C", 1, 1000)
                  if r(35) = 0 then dl.addcomment vbcrlf & "Tag 9C...FAIL!"
             r(36) = dl.waitforsequence("Tag 9F37", 1, 1000)
                  if r(36) = 0 then dl.addcomment vbcrlf & "Tag 9F37...FAIL!"

             countfail()
          else 
             countf = countf + 1
          end if
          dl.pause 500
   end if
End If

end sub
'------------------------------------------------------------
loadkey_D()
loadkey_M()
'------------------------------------------------------------
'If result <> 0 Then
'   dl.resetreceivecounter
'   dl.addcomment vbcrlf
'   DL.AddComment "--- Enhanced Activate Transaction Command (02-20)"
'   DL.SendSequence "02-20 any card/ event mode"
'   result = DL.WaitForSequence("02-20 resp", 1, 10000)
'   dl.pause 10000
'   getresult()
'End If
'------------------------------------------------------------
If result <> 0 Then
   key = "dukpt"
   a1 = MsgBox("Click OK and then tap MChip card", VBOKOnly)
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Clear Event Queue"
   DL.SendSequence " UI EVENT CLEAR"
   result = DL.WaitForSequence("83 Response", 1, 10000)
else 
   countf = countf + 1
End If

If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment ">>> 02-0A DUKPT/ any card/ event mode"
   DL.SendSequence "02-0A DUKPT/ any card/ event mode"
   result = DL.WaitForSequence("02-20 resp", 1, 10000)
   dl.pause 10000
   getresult()
End If
'------------------------------------------------------------
If result <> 0 Then
   key = "ms"
   a1 = MsgBox("Click OK and then tap MChip card", VBOKOnly)
   loadkey_S()
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Clear Event Queue"
   DL.SendSequence " UI EVENT CLEAR"
   result = DL.WaitForSequence("83 Response", 1, 10000)
else 
   countf = countf + 1
End If

If result <> 0 Then
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   DL.AddComment ">>> 02-0A MS key/ any card/ event mode"
   DL.SendSequence "02-0A MS key/ any card/ event mode"
   result = DL.WaitForSequence("02-20 resp", 1, 10000)
   dl.pause 10000
   getresult()
End If
'------------------------------------------------------------
if countf <> 0 then
   result = 0
   dl.addcomment vbcrlf
   dl.addcomment "=============="
   dl.addcomment "FAIL items: " & countf
   dl.addcomment "=============="
else
   result = 1
end if

DL.AddComment vbCrLf
PrintMyResult(result)

DL.AddComment "---------- END OF TEST ----------" & vbCrLf
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""

'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.pause 1000

If result = 0 then
  DL.AddComment Chr(13) & "Result = FAILED"
Else
  DL.AddComment Chr(13) & "Result = PASSED"
End If

If Prompting(0) = "ON" Then
  If result = 0 then
    MsgBox "Result = FAILED", VBOKOnly, "Result"
  Else 
    MsgBox "Result = PASSED", VBOKOnly, "Result"
  End If
End If

'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------

If MasterResult = 1 Then
      MasterVerdict = "PASSED"
ElseIf MasterResult = 0 Then
      MasterVerdict = "FAILED"
End If
result = MasterResult
DL.AddComment vbCrLf
DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 
