DL_SCRIPTVERSION
1
14426

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "USAT009" ' !!!!! EDIT THIS !!!!!
'+++
' This test case is to verify reader return data when blue LED is enabled, if get full track, get transaction result, or activate transaction.
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config2"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result

  'Set Reader Type
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerType = result

  'Set Reader Model
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerModel = result

  'Set Reader FW version
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwVersion = result

  'Set Reader FW build
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwBuild = result

  'Set Reader General Flag
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  genFlag = result
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
result = 1
countf = 0
i = 1
burstmode = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub

Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function


'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function

'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
   sub bon()
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "--- Burst ON"
       if readerType <> "NEO2" then dl.sendsequence "burst on"
       if readerType = "NEO2" then dl.sendsequence "burst on (NEO2)"
       result = dl.waitforsequence("burst ok resp", 1, 2000)
       dl.pause 500
       if result = 0 then countf = countf + 1
       burstmode = 1
   end sub

   sub boff()
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "--- Burst OFF"
       if readerType <> "NEO2" then dl.sendsequence "burst off"
       if readerType = "NEO2" then dl.sendsequence "burst off (NEO2)"
       result = dl.waitforsequence("burst ok resp", 1, 2000) 
       dl.pause 500 
       if result = 0 then countf = countf + 1
       burstmode = 0  
   end sub

   sub sc()
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "--- Swipe card"
       result = dl.waitforsequence("swipe card", 1, 3000)
       dl.pause 500
       if result = 0 then
          dl.addcomment vbcrlf & "** FAIL **"
          dl.addcomment vbcrlf & "Should return 'e-Port format data'!!"
          countf = countf + 1
       end if
   end sub       

   sub gtr()
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "--- Get Transaction result"
       dl.sendsequence "03-00 get transaction result (tap card first)"
       if burstmode = 1 then result = dl.waitforsequence("03-00 resp no data", 1, 2000)
       if burstmode = 0 then result = dl.waitforsequence("03-00 resp has data", 1, 2000)
       dl.pause 500
       if result = 0 then
          dl.addcomment vbcrlf & "** FAIL **"
          dl.addcomment vbcrlf & "Burst ON, should not return 'transaction result'; Burst OFF, should return 'transaction result'!!"
          countf = countf + 1
       end if
   end sub

   sub at()
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "--- Activate Transaction"
       dl.sendsequence "02-01-----Activate Transaction (10 sec timeout)"
       result = dl.waitforsequence("02-01 resp OK", 1, 12000)
       dl.pause 500
       if result = 0 then
          dl.addcomment vbcrlf & "** FAIL **"
          dl.addcomment vbcrlf & "should return 'e-Port format data' + transaction successful result!!"
          countf = countf + 1
       end if
   end sub  
'------------------------------------------------------------
MyInput = MsgBox ("Does reader support USATech function?", VBYesNo)
If MyInput = 6 Then
   if readerType <> "NEO2" then dl.sendsequence "DF7D = 00"
   if readerType = "NEO2" then dl.sendsequence "DF7D = 00 (NEO2)"
   dl.pause 500

   '------------------------------------------------------------Enc OFF (w/o key)
   dl.resetreceivecounter
   dl.addcomment vbcrlf
   dl.sendsequence "Erase All Key (83-00)"
   result = dl.waitforsequence ("83 00", 1, 2000)
   if result <> 0 then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      dl.sendsequence "c7-36 00"
      result = dl.waitforsequence ("c7 00", 1, 2000)
      if result <> 0 then 
         usat()
      else
         countf = countf + 1
         dl.addcomment vbcrlf & "** FAIL **"
      end if
   else
      countf = countf + 1
      dl.addcomment vbcrlf & "** FAIL **"
   end if
   '------------------------------------------------------------Enc ON (w/o key)
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      dl.sendsequence "c7-36 03"
      result = dl.waitforsequence ("c7 00", 1, 2000)
      if result <> 0 then 
         usat()
      else
         countf = countf + 1
         dl.addcomment vbcrlf & "** FAIL **"
      end if
   '------------------------------------------------------------
   '------------------------------------------------------------ sub usat()
   sub usat()
   DL.SendSequence "USA Tech F7 (Enable attraction LEDs)"
   DL.Pause 1000
   
   i = 1
   while i <= 2

       if i = 1 then 
          poll = "poll on demand"
       elseif i = 2 then 
          poll = "auto poll"
       end if

   dl.resetreceivecounter
   dl.addcomment vbcrlf
   dl.addcomment i & ") " & poll
   dl.sendsequence poll
   result = dl.waitforsequence ("poll ok resp", 1, 2000)
   dl.pause 500
   if result <> 0 then
      bon()
      if result <> 0 then
         msgbox "Click OK -> Swipe IDT test card", vbokonly
         sc()

         msgbox "Click OK -> Swipe IDT test card", vbokonly
         dl.pause 3000
         gtr()

         msgbox "Click OK -> Swipe IDT test card", vbokonly
         at()
      else
         countf = countf + 1
      end if

      boff()
      if result <> 0 then
         msgbox "Click OK -> Swipe IDT test card", vbokonly
         sc()

         msgbox "Click OK -> Swipe IDT test card", vbokonly
         dl.pause 3000
         gtr()

         msgbox "Click OK -> Swipe IDT test card", vbokonly
         at()
      else
         countf = countf + 1
      end if
   else
      countf = countf + 1 
   end if

   i = i + 1
   wend
   end sub
   '------------------------------------------------------------
   '------------------------------------------------------------

Else

   DL.AddComment vbCrLf & "The reader does not support USATech function." & vbCrLf
   countf = countf + 1

End If

if countf <> 0 then
   result = 0
else
   result = 1
end if

DL.Pause 1500
DL.AddComment vbCrLf
PrintMyResult(result)

DL.AddComment "---------- END OF TEST ----------"
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""
'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
If 0 Then
If result = 0 then
  DL.AddComment Chr(13) & "Result = FAILED"
Else
  DL.AddComment Chr(13) & "Result = PASSED"
End If
End If

If Prompting(0) = "ON" Then
  If result = 0 then
    MsgBox "Result = FAILED", VBOKOnly, "Result"
  Else 
    MsgBox "Result = PASSED", VBOKOnly, "Result"
  End If
End If

'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------

If MasterResult = 1 Then
      MasterVerdict = "PASSED"
ElseIf MasterResult = 0 Then
      MasterVerdict = "FAILED"
End If
result = MasterResult
DL.AddComment vbCrLf
DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 
