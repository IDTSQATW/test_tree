DL_SCRIPTVERSION
1
49640

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "EGN21-2" ' !!!!! EDIT THIS !!!!!
' This test case is to verify reader does (not) return transaction data when blue LED is disabled or enabled; for swipe card case.
' JIRA -- VENDI-172: In Vend mode, if the blue LED is turned off, reader should not read cards
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result
      
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
DL.StartCommunication
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
result = 1
countf = 0
l = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON " Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub

Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function

sub precondition()
    dl.resetreceivecounter
    dl.addcomment "Erase All Keys..."
    dl.sendsequence "Erase All Keys"
    result = dl.waitforsequence("erase key ok", 1, 2000)
    dl.pause 500
    if result <> 0 then
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "Set DUKPT Key Encryption Type..."
       dl.sendsequence "0-use TDES to encrypt (C7-32)"
       result = dl.waitforsequence("set dukpt type", 1, 2000)
       dl.pause 500
       if result <> 0 then
          dl.resetreceivecounter
          dl.addcomment vbcrlf
          dl.addcomment "Get DUKPT Key Encryption Type..."
          dl.sendsequence "Get account DUKPT encryption type (C7-33)"
          result = dl.waitforsequence("get dukpt type", 1, 2000)
          dl.pause 500
          if result <> 0 then
             dl.addcomment vbcrlf & "OK!"
          else
             dl.addcomment vbcrlf & "Get DUKPT Key Encryption Type: FAIL!"
          end if
       else
          dl.addcomment vbcrlf & "Set DUKPT Key Encryption Type: FAIL!"
       end if
    else
       dl.addcomment vbcrlf & "Erase All Keys: FAIL!"
    end if
end sub

sub loadkey_D()
    dl.addcomment vbcrlf
    dl.addcomment "Loading DUKPT key..."
       dl.resetreceivecounter
       dl.sendsequence "Load Plaintext KPK Component (the 1st)"
       result = dl.waitforsequence("load kpk ok", 1, 2000)
       dl.pause 500
       if result <> 0 then
          dl.resetreceivecounter
          dl.sendsequence "Load Plaintext KPK Component (the last)"
          result = dl.waitforsequence("load kpk ok", 1, 2000)
          dl.pause 500
          if result <> 0 then
             dl.resetreceivecounter
             dl.sendsequence "Load KPK"
             result = dl.waitforsequence("load kpk ok", 1, 2000)
             dl.pause 500
             if result <> 0 then
                dl.resetreceivecounter
                dl.sendsequence "Load DUKPT key (key index 5)"
                result = dl.waitforsequence("dukpt ok", 1, 2000)
                dl.pause 500
                if result <> 0 then
                   dl.addcomment vbcrlf & "OK!"
                else
                   dl.addcomment vbcrlf & "Load DUKPT key (key index 5): FAIL!"
                end if
             else
                dl.addcomment vbcrlf & "Load KPK: FAIL!"
             end if
          else
             dl.addcomment vbcrlf & "Load Plaintext KPK Component (the last): FAIL!"
          end if
       else
          dl.addcomment vbcrlf & "Load Plaintext KPK Component (the 1st): FAIL!"
       end if 
end sub
'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function

'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
   sub sc()
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "--- Swipe card"
       result = dl.waitforsequence("swipe card", 1, 4000)
       if result = 1 then
          dl.addcomment vbcrlf & "** FAIL **"
          dl.addcomment vbcrlf & "Should return nothing!!"
          countf = countf + 1
       end if
   end sub       

   sub gtr()
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "--- Get Transaction result"
       dl.sendsequence "03-00 get transaction result (tap card first)"
       if l = 1 then
          result = dl.waitforsequence("03-00 resp", 1, 2000)
       elseif l = 2 then
          result = dl.waitforsequence("03-00 resp OK", 1, 2000)
          dl.pause 500
       end if
       if result = 0 then
          dl.addcomment vbcrlf & "** FAIL **"
          dl.addcomment vbclrf & "Blue light OFF, should not return 'transaction result'; Blue light ON, should return 'transaction result'!!"
          countf = countf + 1
       end if
   end sub

   sub at()
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "--- Activate Transaction"
       dl.sendsequence "02-01-----Activate Transaction (10 sec timeout)"
       if l = 1 then
          result = dl.waitforsequence("02-01 resp", 1, 12000)
       elseif l = 2 then
          result = dl.waitforsequence("02-01 resp OK", 1, 2000)
          dl.pause 500
       end if
       if result = 0 then
          dl.addcomment vbcrlf & "** FAIL **"
          dl.addcomment vbcrlf & "Blue light OFF, Should return 'transaction timeout result'; Blue light ON, should return 'transaction result'!!"
          countf = countf + 1
       end if
   end sub  
'------------------------------------------------------------
   precondition()
   if result <> 0 then
      loadkey_D()
      if result <> 0 then
         dl.resetreceivecounter
         dl.addcomment vbcrlf
         DL.AddComment "--- Data Encryption: Enable"
         DL.SendSequence "Data Encryption Enable (C7-36)"
         result = DL.WaitForSequence("enc on", 1, 2000)
      else 
         countf = countf + 1
      end if
   end if

   while l <= 2

         if l = 1 then
            light = "F0-F6-----Disable Blue LED"
            i = 1
         elseif l = 2 then
            light = "F0-F7-----Enable Blue LED"
            i = 1
         end if
         dl.resetreceivecounter
         dl.addcomment vbcrlf
         dl.addcomment ">>> " & light
         dl.sendsequence light
         DL.Pause 1000
   
         while i <= 2
         if i = 1 then
            poll = "poll on demand"
         elseif i = 2 then
            poll = "auto poll"
         end if
         dl.resetreceivecounter
         dl.addcomment vbcrlf
         dl.addcomment i & ") " & poll
         dl.sendsequence poll
         result = dl.waitforsequence ("poll ok resp", 1, 2000)
         dl.pause 500

         if result <> 0 then
            if result <> 0 then
               msgbox "Swipe card after clicked OK", vbokonly
               sc()

               msgbox "Swipe card after clicked OK", vbokonly
               dl.pause 3000
               gtr()

               msgbox "Swipe card after clicked OK", vbokonly
               at()
            else
               countf = countf + 1
            end if
         else
            countf = countf + 1 
         end if

         i = i + 1
         wend

   l = l + 1
   wend

if countf <> 0 then
   result = 0
else
   result = 1
end if

DL.Pause 1500
DL.AddComment vbCrLf
PrintMyResult(result)

DL.AddComment "---------- END OF TEST ----------"
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""
'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
If 0 Then
If result = 0 then
  DL.AddComment Chr(13) & "Result = FAILED"
Else
  DL.AddComment Chr(13) & "Result = PASSED"
End If
End If

If Prompting(0) = "ON" Then
  If result = 0 then
    MsgBox "Result = FAILED", VBOKOnly, "Result"
  Else 
    MsgBox "Result = PASSED", VBOKOnly, "Result"
  End If
End If

'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------

If MasterResult = 1 Then
      MasterVerdict = "PASSED"
ElseIf MasterResult = 0 Then
      MasterVerdict = "FAILED"
End If
result = MasterResult
DL.AddComment vbCrLf
DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 



