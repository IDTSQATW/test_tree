DL_SCRIPTVERSION
1
12996

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "EGN08" ' !!!!! EDIT THIS !!!!!
' Objective: Enabled data encryption,
' 1) can enable again; can not disable
' 2) can not change encryption type
' 3) can disable burst mode; can not enable butst mode 
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config2"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result

  'Set Reader Type
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerType = result

  'Set Reader Model
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerModel = result

  'Set Reader FW version
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwVersion = result

  'Set Reader FW build
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwBuild = result

  'Set Reader General Flag
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  genFlag = result
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
dim r(5)
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
countf = 0
result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub


Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function
'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function
'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
if readerType <> "NEO2" then 
   DL.SendSequence "04-F0"
   dl.pause 12000

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Erase All Key (83-00)"
      DL.SendSequence "Erase All Key (83-00)"
      result = DL.WaitForSequence("83-00 ok resp", 1, 2000)
      dl.pause 300
      if result <> 0 then
         dl.resetreceivecounter
         dl.addcomment vbcrlf
         DL.AddComment "--- Load KPK"
         DL.SendSequence "Load Plaintext Key - command 1 (80-00)"
         result = DL.WaitForSequence("80-xx ok resp", 1, 2000)
         dl.pause 300 
         if result <> 0 then
            dl.resetreceivecounter
            DL.SendSequence "Load Plaintext Key - command 2  (80-00)"
            result = DL.WaitForSequence("80-xx ok resp", 1, 2000)
            dl.pause 300 
            if result <> 0 then
               dl.resetreceivecounter
               DL.SendSequence "Load Encrypted KPK (80-01)"
               result = DL.WaitForSequence("80-xx ok resp", 1, 2000)
               dl.pause 300 
               if result <> 0 then
                  dl.resetreceivecounter
                  dl.addcomment vbcrlf
                  DL.AddComment "--- Load DUKPT key"
                  DL.SendSequence "Enter DUKPT Key (81-00)"
                  result = DL.WaitForSequence("81-xx ok resp", 1, 2000)
                  dl.pause 300 
               end if
            end if
         end if
      end if 
   end if
else
   keycheck = msgbox("Does reader has data key & Enc OFF?", vbyesno)
   readercheck = msgbox("Is reader SRED project?", vbyesno)
end if 
'------------------------------------------------------------
if readerType <> "NEO2" or keycheck = 6 then
   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Dis-able Data Encryption (C7-36)"
      DL.SendSequence "Dis-able Data Encryption (C7-36)"
      result = DL.WaitForSequence("C7-xx ok resp", 1, 5000)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Enable Data Encryption  (C7-36)"
      DL.SendSequence "Enable Data Encryption  (C7-36)"
      result = DL.WaitForSequence("C7-xx ok resp", 1, 5000)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Dis-able Data Encryption (C7-36)"
      DL.SendSequence "Dis-able Data Encryption (C7-36)"
              result = DL.WaitForSequence("C7-xx ok resp", 1, 1500)
              ReverseResult(result)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Enable Data Encryption  (C7-36)"
      DL.SendSequence "Enable Data Encryption  (C7-36)"
      result = DL.WaitForSequence("C7-xx ok resp", 1, 5000)
   End If
end if
'------------------------------------------------------------
if readerType <> "NEO2" then
   for j = 1 to 2
      If result <> 0 Then
         dl.resetreceivecounter
         dl.addcomment vbcrlf
         DL.AddComment "--- 1-use AES to encrypt (C7-32)"
         DL.SendSequence "1-use AES to encrypt (C7-32)"
         result = DL.WaitForSequence("C7-xx ok resp", 1, 5000)
      End If

      If result <> 0 Then
         dl.resetreceivecounter
         dl.addcomment vbcrlf
         DL.AddComment "--- 0-use TDES to encrypt (C7-32)"
         DL.SendSequence "0-use TDES to encrypt (C7-32)"
         result = DL.WaitForSequence("C7-xx ok resp", 1, 5000)
      End If
   next
end if
'------------------------------------------------------------
if readerType <> "NEO2" or keycheck = 6 then
   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Burst: ON"
      if readerType <> "NEO2" then 
         DL.SendSequence "04-00-----Burst ON"
      else
         DL.SendSequence "04-00-----Burst ON (NEO2)"
      end if
      result = DL.WaitForSequence("04-xx ok resp", 1, 1500)
      ReverseResult(result)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Burst: Auto Exit"
      if readerType <> "NEO2" then 
         DL.SendSequence "04-00-----Burst Auto Exit"
      else
         DL.SendSequence "04-00-----Burst Auto Exit (NEO2)"
      end if
      result = DL.WaitForSequence("04-xx ok resp", 1, 1500)
      ReverseResult(result)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Burst: OFF"
      if readerType <> "NEO2" then 
         DL.SendSequence "04-00-----Burst OFF"
      else
         DL.SendSequence "04-00-----Burst OFF (NEO2)"
      end if
      result = DL.WaitForSequence("04-xx ok resp", 1, 2000)
   End If
end if
'------------------------------------------------------------
if readerType <> "NEO2" or keycheck = 6 then
   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- 02-01"
      DL.SendSequence "02-01"
      if readerType <> "NEO2" then 
         result = DL.WaitForSequence("02 0C", 1, 3000)
      else 
         result = DL.WaitForSequence("02 0B", 1, 3000)
      end if
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- 03-00"
      DL.SendSequence "03-00"
      result = DL.WaitForSequence("03 00", 1, 1500)
      ReverseResult(result)
   End If
end if

if readercheck = 6 then     'SRED project
   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Dis-able Data Encryption (C7-36)"
      DL.SendSequence "Dis-able Data Encryption (C7-36)"
      result = DL.WaitForSequence("C7-xx ok resp", 1, 1200)
      ReverseResult(result)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Enable Data Encryption  (C7-36)"
      DL.SendSequence "Enable Data Encryption  (C7-36)"
      result = DL.WaitForSequence("C7-xx ok resp", 1, 1200)
      ReverseResult(result)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- 02-01"
      DL.SendSequence "02-01"
      if readerType <> "NEO2" then 
         result = DL.WaitForSequence("02 0C", 1, 3000)
      else 
         result = DL.WaitForSequence("02 0B", 1, 3000)
      end if
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- 03-00"
      DL.SendSequence "03-00"
      result = DL.WaitForSequence("03 0B", 1, 3000)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Burst: ON"
      if readerType <> "NEO2" then 
         DL.SendSequence "04-00-----Burst ON"
      else
         DL.SendSequence "04-00-----Burst ON (NEO2)"
      end if
      result = DL.WaitForSequence("04-xx ok resp", 1, 1200)
      ReverseResult(result)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Burst: Auto Exit"
      if readerType <> "NEO2" then 
         DL.SendSequence "04-00-----Burst Auto Exit"
      else
         DL.SendSequence "04-00-----Burst Auto Exit (NEO2)"
      end if
      result = DL.WaitForSequence("04-xx ok resp", 1, 1200)
      ReverseResult(result)
   End If

   If result <> 0 Then
      dl.resetreceivecounter
      dl.addcomment vbcrlf
      DL.AddComment "--- Burst: OFF"
      if readerType <> "NEO2" then 
         DL.SendSequence "04-00-----Burst OFF"
      else
         DL.SendSequence "04-00-----Burst OFF (NEO2)"
      end if
      result = DL.WaitForSequence("04-xx ok resp", 1, 2000)
   End If
end if

if keycheck = 7 and readercheck = 7 then
   dl.addcomment vbcrlf
   DL.AddComment "***** Please preset the reader first... ex. load data key & set encryption off first"
   result = 0
end if
'------------------------------------------------------------
DL.AddComment vbcrlf & "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""

'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'DL.pause 1000

'If result = 0 then
'  DL.AddComment Chr(13) & "Result = FAILED"
'Else
'  DL.AddComment Chr(13) & "Result = PASSED"
'End If

'If Prompting(0) = "ON" Then
'  If result = 0 then
'    MsgBox "Result = FAILED", VBOKOnly, "Result"
'  Else 
'    MsgBox "Result = PASSED", VBOKOnly, "Result"
'  End If
'End If
'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------
'If MasterResult = 1 Then
'      MasterVerdict = "PASSED"
'ElseIf MasterResult = 0 Then
'      MasterVerdict = "FAILED"
'End If
'result = MasterResult
'DL.AddComment vbCrLf
'DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 

Sub DL_OnSend()
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Right(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Left(crcStr, 2)) ' high byte
    End If
End Sub
