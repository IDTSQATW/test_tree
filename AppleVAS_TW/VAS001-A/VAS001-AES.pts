DL_SCRIPTVERSION
1
58354

'------------------------------------------------------------
' SCRIPT SETUP
' - Assign project name
'------------------------------------------------------------
Dim ProjectName
ProjectName = "VAS001-AES" ' !!!!! EDIT THIS !!!!!
'+++
' This test is to verify AppleVAS w/ VAS only process (w/ and w/o exlusive bit set in DF50)
' Expect VAS data only w/o payment data in response when there are both active passes and payment profiles on iPhone
' JIRA#GRN-225: Encryption ON, after sent cmd 02-40 w/ AppleVAS tag (VAS only) -> tapped iPhone (VAS card), reader did not return tag DFEE26.
'------------------------------------------------------------
' Config Variables (!!!!! DO NOT EDIT !!!!!)
#include "..\..\docklight.inc"
' - Set the following:
'   - Enable/disable Test Case Number and Description
'   - Enable/disable Test Step prompting
'   - Assign Docklight COM port
'   - Assign Docklight Baud Rate
'------------------------------------------------------------
FileInput.OpenFile prefix & "Regress.Config2"
Dim Prompting(1)
Dim COM_Port(1)
Dim POSBaudRate(1)

Do Until FileInput.EndOfFile
  'Display Test Case Number and Description     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()
  Prompting(0) = result
      
  'Display Test Steps   
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  Prompting(1) = result

  'Set Docklight COM Port     
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  COM_Port(1) = result

  'Set Reader Baud Rate
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  POSBaudRate(1) = result

  'Set Reader Type
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerType = result

  'Set Reader Model
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  readerModel = result

  'Set Reader FW version
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwVersion = result

  'Set Reader FW build
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  fwBuild = result

  'Set Reader General Flag
  result = FileInput.GetLine() 'by pass variable name
  result = FileInput.GetLine()      
  genFlag = result
Loop

Sub StepPrompt(PromptString)
      DL.AddComment PromptString
      If Prompting(1) = "ON" Then
            MsgBox PromptString, VBOKOnly, "Test Step"
      Else
      End If
      
End Sub

'------------------------------------------------------------
' Definitions and Initializations (!!!!! DO NOT EDIT !!!!!)
' -  
'------------------------------------------------------------
DL.OpenProject ProjectName & ".ptp"
'DL.StartCommunication
DL.ClearCommWindows 
DL.StartLogging "DOCKLIGHT_LOG",False, "H"
', false, true

Dim prompt
Dim confirm
max=1
min=0
Randomize
errCnt = 0
caseValid = 0
result = 1

DL.AddComment "TEST CASE: " & ProjectName & vbCrLf
If authn Then '""

'------------------------------------------------------------
'POS COM port and Baud Rate settings (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
DL.AddComment "--- Set POS COM PORT Settings"
DL.StopCommunication
DL.AddComment "Set POS COM PORT..."
DL.SetChannelSettings(COM_Port(1) & ":" & POSBaudRate(1) & ",NONE,8,1")
DL.AddComment "POS operating on " & COM_Port(1) & " @ " & POSBaudRate(1) & " baud..."
DL.AddComment "Set POS COM PORT - COMPLETE" & vbCrLf
DL.Pause 1000

DL.StartCommunication

'------------------------------------------------------------
'Result reporting (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
MasterResult = 0
If ProjectName <> "" And Prompting(1) = "ON" Then
   caseValid = 1
Else
   caseValid =(Int((max-min+1)*Rnd+min))
   'DL.AddComment "caseValid = " & caseValid
End If

Sub PrintMyResult(ResultX)
      If ResultX <> 0 And errCnt = 0 And caseValid <> 0 Then
            MasterResult = 1
            DL.AddComment "Result = PASSED"
      Else
            MasterResult = 0
            DL.AddComment "Result = FAILED"
      End If
End Sub

Function ReverseResult(ResultParam)
      If ResultParam = 1 Then
            result = 0
      ElseIf ResultParam = 0 Then
            result = 1
      End If
End Function

sub precondition()
    dl.resetreceivecounter
    dl.addcomment "Erase All Keys..."
    dl.sendsequence "Erase All Keys"
    result = dl.waitforsequence("erase key ok", 1, 2000)
    dl.pause 500
    if result <> 0 then
       dl.resetreceivecounter
       dl.addcomment vbcrlf
       dl.addcomment "Set DUKPT Key Encryption Type..."
       dl.sendsequence "1-use AES to encrypt (C7-32)"
       result = dl.waitforsequence("set dukpt type", 1, 2000)
       dl.pause 500
       if result <> 0 then
          dl.resetreceivecounter
          dl.addcomment vbcrlf
          dl.addcomment "Get DUKPT Key Encryption Type..."
          dl.sendsequence "Get account DUKPT encryption type (C7-33)"
          result = dl.waitforsequence("get dukpt type", 1, 2000)
          dl.pause 500
          if result <> 0 then
             dl.addcomment vbcrlf & "OK!"
          else
             dl.addcomment vbcrlf & "Get DUKPT Key Encryption Type: FAIL!"
          end if
       else
          dl.addcomment vbcrlf & "Set DUKPT Key Encryption Type: FAIL!"
       end if
    else
       dl.addcomment vbcrlf & "Erase All Keys: FAIL!"
    end if
end sub

sub loadkey_D()
    dl.addcomment vbcrlf
    dl.addcomment "Loading DUKPT key..."
       dl.resetreceivecounter
       dl.sendsequence "Load Plaintext KPK Component (the 1st)"
       result = dl.waitforsequence("load kpk ok", 1, 2000)
       dl.pause 500
       if result <> 0 then
          dl.resetreceivecounter
          dl.sendsequence "Load Plaintext KPK Component (the last)"
          result = dl.waitforsequence("load kpk ok", 1, 2000)
          dl.pause 500
          if result <> 0 then
             dl.resetreceivecounter
             dl.sendsequence "Load KPK"
             result = dl.waitforsequence("load kpk ok", 1, 2000)
             dl.pause 500
             if result <> 0 then
                dl.resetreceivecounter
                dl.sendsequence "Load DUKPT key (key index 5)"
                result = dl.waitforsequence("dukpt ok", 1, 2000)
                dl.pause 500
                if result <> 0 then
                   dl.addcomment vbcrlf & "OK!"
                else
                   dl.addcomment vbcrlf & "Load DUKPT key (key index 5): FAIL!"
                end if
             else
                dl.addcomment vbcrlf & "Load KPK: FAIL!"
             end if
          else
             dl.addcomment vbcrlf & "Load Plaintext KPK Component (the last): FAIL!"
          end if
       else
          dl.addcomment vbcrlf & "Load Plaintext KPK Component (the 1st): FAIL!"
       end if 
end sub
'------------------------------------------------------------
'Debugging (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
Function MyDebug(DebugString)
      DL.AddComment  vbCrLf & DebugString & " = " & result & vbCrLf
      MsgBox DebugString & " = " & result, VBOKOnly, "Debug"
End Function

'------------------------------------------------------------
'TEST BEGINS
'------------------------------------------------------------
if readerType = "GR" or readerType = "NEO1" then
   precondition()
   if result <> 0 then
      loadkey_D()
   end if
elseif readerType = "NEO2" or readerType = "USAT" or readerType = "USAT_SRED" then
       if result <> 0 then
          dl.resetreceivecounter
          dl.addcomment vbcrlf
          dl.addcomment "--- Get DUKPT Key Encryption Type... (AES)"
          dl.sendsequence "Get account DUKPT encryption type (C7-33)"
          result = dl.waitforsequence("get dukpt type", 1, 2000)
       end if
end if

if result <> 0 then
   dl.resetreceivecounter
   DL.AddComment "--- Get Data Encryption (C7-37)"
   DL.SendSequence "Get Data Encryption (C7-37)"
   result = DL.WaitForSequence("C7-37 resp", 1, 2000)
else 
   countf = countf + 1
end if
'------------------------------------------------------------
errFlg = 0

If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Set Merchant 3 - pass.com.apple.wallet.vas.test_Starbucks "
   DL.SendSequence "Set Merchant 3 - pass.com.apple.wallet.vas.test_Starbucks"
   result = DL.WaitForSequence("Generic 04-xx + resp", 1, 10000)
End If

If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Set Merchant 4 - pass.com.apple.wallet.panera w/URL "
   DL.SendSequence "Set Merchant 4 - pass.com.apple.wallet.panera w/URL"
   result = DL.WaitForSequence("Generic 04-xx + resp", 1, 10000)
End If

If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Get Merchant 3  "
   DL.SendSequence "Get Merchant 3 "
   result = DL.WaitForSequence("Get pass.com.apple.wallet.vas.test_Starbucks resp", 1, 10000)
End If

If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- Get Merchant 4  "
   DL.SendSequence "Get Merchant 4 "
   result = DL.WaitForSequence("Get pass.com.apple.wallet.panera w/URL resp", 1, 10000)
End If
'============================================================
If result <> 0 Then
   prompt2 = "Click OK --> Present iPhone w/ pass for Panera Bread..."
   result = MsgBox(prompt2, VBOKOnly, "Acivate Transaction")
End If

If result <> 0 Then
   DL.ResetReceiveCounter
   dl.addcomment vbcrlf
   DL.AddComment "--- ACT - VAS Only *** " & readerType 
   DL.SendSequence " ACT - VAS Only"
   result = DL.WaitForSequence("Vas only resp", 1, 32000)

  If result <> 0 Then
     result = DL.WaitForSequence("9F25 - Panera Bread", 1, 500)
     If result = 0 Then
       DL.AddComment vbCrLf & "9F25 is either missing or having a wrong value" & vbCrLf
       errFlg = errFlg + 1
       result = 1
     End If
  End If

  If result <> 0 Then
     result = DL.WaitForSequence("9F27 - Vas data generic resp", 1, 500)
     If result = 0 Then
       DL.AddComment vbCrLf & "9F27 is either missing or having a wrong value" & vbCrLf
       errFlg = errFlg + 1
       result = 1
     End If
  End If 

  If result <> 0 Then
     if readerType = "GR" or readerType = "NEO1" then result = DL.WaitForSequence("DFEE26", 1, 500)
     if readerType = "NEO2" or readerType = "USAT" or readerType = "USAT_SRED" then result = DL.WaitForSequence("DFEE26 (NEO2)", 1, 500)
     If result = 0 Then
       DL.AddComment vbCrLf & "DFEE26 is either missing or having a wrong value" & vbCrLf
       errFlg = errFlg + 1
       result = 1
     End If
  End If

  If result <> 0 Then
     result = DL.WaitForSequence("Payment AID tag 84 generic resp", 1, 500)
     If result <> 0 Then
       DL.AddComment vbCrLf & "Unexpected payment data may come up! Please analyze the data log for conclusion." & vbCrLf
       errFlg = errFlg + 1
     Else
       result = 1
     End If 
  End If
End If

If result = 0 Or errFlg <> 0 Then
   result = 0
Else 
   result = 1
End If
'------------------------------------------------------------
DL.AddComment vbCrLf

DL.AddComment "---------- END OF TEST ----------" & vbCrLf
PrintMyResult(result)
Else '""
  DL.AddComment vbCrLf & authnMsg & vbCrLf
End If '""
'------------------------------------------------------------
'Result verdict (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'DL.pause 1000
'If 0 Then
'If result = 0 then
'  DL.AddComment Chr(13) & "Result = FAILED"
'Else
'  DL.AddComment Chr(13) & "Result = PASSED"
'End If
'End If

'If Prompting(0) = "ON" Then
'  If result = 0 then
'    MsgBox "Result = FAILED", VBOKOnly, "Result"
'  Else 
'    MsgBox "Result = PASSED", VBOKOnly, "Result"
'  End If
'End If
'-------------------------------------------------------------
' DETERMINE MASTER VERDICT (!!!!! DO NOT EDIT !!!!!)
'-------------------------------------------------------------
'If MasterResult = 1 Then
'      MasterVerdict = "PASSED"
'ElseIf MasterResult = 0 Then
'      MasterVerdict = "FAILED"
'End If
'result = MasterResult
'DL.AddComment vbCrLf
'DL.AddComment "MASTER RESULT = " & MasterVerdict
'MasterResult = 0
'------------------------------------------------------------
' WRITE FINAL VERDICT (!!!!! DO NOT EDIT !!!!!)
'------------------------------------------------------------
'If MasterResult = 0 Then 
'	FileOutput.CreateFile "MR_FAIL"
'ElseIf MasterResult = 1 Then
'	FileOutput.CreateFile "MR_PASS"
'End If

FileOutput.CreateFile "FINAL_VERDICT.txt"

If MasterResult = 0 Then 
	FileOutput.WriteLine "0|FAIL|NOK"
ElseIf MasterResult = 1 Then
	FileOutput.WriteLine "1|PASS|OK"
End If
'FileOutput.WriteLine MasterResult
FileOutput.CloseFile 

Sub DL_OnSend()
    usDataLen = DL.OnSend_GetSize() - 2
    If usDataLen > 0 Then
        crcStr = DL.CalcChecksum("CRC-CCITT", DL.OnSend_GetData("H"), "H", 1, usDataLen) 
        ' Write result to the last two bytes of the sequence
        DL.OnSend_Poke usDataLen + 1, CInt("&h" + Right(crcStr, 2)) ' low byte
        DL.OnSend_Poke usDataLen + 2, CInt("&h" + Left(crcStr, 2)) ' high byte
    End If
End Sub
